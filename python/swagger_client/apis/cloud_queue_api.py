# coding: utf-8

"""
CloudQueueApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CloudQueueApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_message(self, app_id, queue_name, body, **kwargs):
        """
        push message to queue
        add message message to queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_message(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_message" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `add_message`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `add_message`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_message`")

        resource_path = 'queue/{app_id}/{queue_name}/message'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_subscriber(self, app_id, queue_name, body, **kwargs):
        """
        add a subscriber to this queue
        add a subscriber to this queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_subscriber(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: payload (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_subscriber" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `add_subscriber`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `add_subscriber`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_subscriber`")

        resource_path = 'queue/{app_id}/{queue_name}/subscriber'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def clear(self, app_id, queue_name, body, **kwargs):
        """
        clear queue
        clear queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clear(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: client key of app (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `clear`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `clear`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clear`")

        resource_path = 'queue/{app_id}/{queue_name}/clear'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_queue(self, app_id, queue_name, body, **kwargs):
        """
        create a new queue
        add message message to queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_queue(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: name of queue (required)
        :param QueueBody body: client key of app (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_queue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `create_queue`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `create_queue`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_queue`")

        resource_path = 'queue/{app_id}/{queue_name}/create'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_message(self, app_id, queue_name, message_id, body, **kwargs):
        """
        delete a message in this queue
        delete a message in this queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_message(app_id, queue_name, message_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param str message_id: message id (required)
        :param KeyBody body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'message_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `delete_message`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `delete_message`")
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params) or (params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `delete_message`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_message`")

        resource_path = 'queue/{app_id}/{queue_name}/message/{message_id}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_queue(self, app_id, queue_name, body, **kwargs):
        """
        delete a queue
        delete queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_queue(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: client key of app (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_queue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `delete_queue`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `delete_queue`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_queue`")

        resource_path = 'queue/{app_id}/{queue_name}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_subscriber(self, app_id, queue_name, body, **kwargs):
        """
        delete a subscriber to this queue
        delete a subscriber to this queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_subscriber(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: payload (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscriber" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `delete_subscriber`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `delete_subscriber`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_subscriber`")

        resource_path = 'queue/{app_id}/{queue_name}/subscriber'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_all_messages(self, app_id, body, **kwargs):
        """
        push message to queue
        add message message to queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_messages(app_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param KeyBody body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_messages" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_all_messages`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_all_messages`")

        resource_path = 'queue/{app_id}/messages'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_all_queues(self, app_id, body, **kwargs):
        """
        get all queues
        get all queues

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_queues(app_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param KeyBody body: client key of app (required)
        :return: list[Queue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_queues" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_all_queues`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_all_queues`")

        resource_path = 'queue/{app_id}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain;charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Queue]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_message(self, app_id, queue_name, body, **kwargs):
        """
        get messages in queue
        get messages in queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_message(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueuePayloadWithCount body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_message`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `get_message`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_message`")

        resource_path = 'queue/{app_id}/{queue_name}/getMessage'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_message_by_id(self, app_id, queue_name, message_id, body, **kwargs):
        """
        get a message in this queue by its id
        get a message in this queue by its id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_message_by_id(app_id, queue_name, message_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param str message_id: message id (required)
        :param KeyBody body: client key of app (required)
        :return: QueueMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'message_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_message_by_id`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `get_message_by_id`")
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params) or (params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `get_message_by_id`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_message_by_id`")

        resource_path = 'queue/{app_id}/{queue_name}/message/{message_id}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QueueMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_queue(self, app_id, queue_name, body, **kwargs):
        """
        get queue
        get queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_queue(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param KeyBody body: client key of app (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_queue`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `get_queue`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_queue`")

        resource_path = 'queue/{app_id}/{queue_name}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Queue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def peek(self, app_id, queue_name, body, **kwargs):
        """
        peek messages in queue without removing them
        peek messages in queue without removing them

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.peek(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueuePayloadWithCount body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method peek" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `peek`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `peek`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `peek`")

        resource_path = 'queue/{app_id}/{queue_name}/peek'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def peek_message(self, app_id, queue_name, body, **kwargs):
        """
        peek messages in queue without removing them
        peek messages in queue without removing them

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.peek_message(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueuePayloadWithCount body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method peek_message" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `peek_message`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `peek_message`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `peek_message`")

        resource_path = 'queue/{app_id}/{queue_name}/peekMessage'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def pull(self, app_id, queue_name, body, **kwargs):
        """
        pull messages from queue
        pull messages from queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pull(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueuePayloadWithCount body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pull" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `pull`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `pull`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `pull`")

        resource_path = 'queue/{app_id}/{queue_name}/pull'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def refresh_message_timeout(self, app_id, queue_name, message_id, body, **kwargs):
        """
        refresh timeout of a message in this queue
        refresh timeout of a message in this queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_message_timeout(app_id, queue_name, message_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param str message_id: message id (required)
        :param RefreshMessageTimeoutBody body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'message_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_message_timeout" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `refresh_message_timeout`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `refresh_message_timeout`")
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params) or (params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `refresh_message_timeout`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `refresh_message_timeout`")

        resource_path = 'queue/{app_id}/{queue_name}/{message_id}/refresh-message-timeout'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']
        if 'message_id' in params:
            path_params['message_id'] = params['message_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_message(self, my_app_id, queue_name, body, **kwargs):
        """
        push message to queue
        add message message to queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_message(my_app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str my_app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param QueueBody body: client key of app (required)
        :return: list[QueueMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['my_app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_message" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'my_app_id' is set
        if ('my_app_id' not in params) or (params['my_app_id'] is None):
            raise ValueError("Missing the required parameter `my_app_id` when calling `update_message`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `update_message`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_message`")

        resource_path = 'queue/{my_app_id}/{queue_name}/message'.replace('{format}', 'json')
        path_params = {}
        if 'my_app_id' in params:
            path_params['my_app_id'] = params['my_app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[QueueMessage]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_queue(self, app_id, queue_name, body, **kwargs):
        """
        update queue
        update queue

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_queue(app_id, queue_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Id of CloudApp (required)
        :param str queue_name: Name of queue (required)
        :param ModifiedQueueBody body: client key of app (required)
        :return: ModifiedQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'queue_name', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_queue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `update_queue`")
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params) or (params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `update_queue`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_queue`")

        resource_path = 'queue/{app_id}/{queue_name}'.replace('{format}', 'json')
        path_params = {}
        if 'app_id' in params:
            path_params['app_id'] = params['app_id']
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ModifiedQueue',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
