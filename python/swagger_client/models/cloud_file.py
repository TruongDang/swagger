# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CloudFile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudFile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'acl': 'ACL',
            'name': 'str',
            'size': 'float',
            'url': 'str',
            'expires': 'datetime',
            'content_type': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'type': '_type',
            'acl': 'ACL',
            'name': 'name',
            'size': 'size',
            'url': 'url',
            'expires': 'expires',
            'content_type': 'contentType'
        }

        self._id = None
        self._type = 'file'
        self._acl = None
        self._name = None
        self._size = None
        self._url = None
        self._expires = None
        self._content_type = 'application/octet-stream'

    @property
    def id(self):
        """
        Gets the id of this CloudFile.


        :return: The id of this CloudFile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CloudFile.


        :param id: The id of this CloudFile.
        :type: str
        """
        self._id = id

    @property
    def type(self):
        """
        Gets the type of this CloudFile.


        :return: The type of this CloudFile.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CloudFile.


        :param type: The type of this CloudFile.
        :type: str
        """
        self._type = type

    @property
    def acl(self):
        """
        Gets the acl of this CloudFile.


        :return: The acl of this CloudFile.
        :rtype: ACL
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """
        Sets the acl of this CloudFile.


        :param acl: The acl of this CloudFile.
        :type: ACL
        """
        self._acl = acl

    @property
    def name(self):
        """
        Gets the name of this CloudFile.


        :return: The name of this CloudFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CloudFile.


        :param name: The name of this CloudFile.
        :type: str
        """
        self._name = name

    @property
    def size(self):
        """
        Gets the size of this CloudFile.


        :return: The size of this CloudFile.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this CloudFile.


        :param size: The size of this CloudFile.
        :type: float
        """
        self._size = size

    @property
    def url(self):
        """
        Gets the url of this CloudFile.


        :return: The url of this CloudFile.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CloudFile.


        :param url: The url of this CloudFile.
        :type: str
        """
        self._url = url

    @property
    def expires(self):
        """
        Gets the expires of this CloudFile.


        :return: The expires of this CloudFile.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """
        Sets the expires of this CloudFile.


        :param expires: The expires of this CloudFile.
        :type: datetime
        """
        self._expires = expires

    @property
    def content_type(self):
        """
        Gets the content_type of this CloudFile.


        :return: The content_type of this CloudFile.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this CloudFile.


        :param content_type: The content_type of this CloudFile.
        :type: str
        """
        self._content_type = content_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

