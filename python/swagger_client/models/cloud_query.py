# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CloudQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'key': 'str',
            'skip': 'int',
            'limit': 'int',
            'query': 'Query',
            'sort': 'object',
            'select': 'object'
        }

        self.attribute_map = {
            'key': 'key',
            'skip': 'skip',
            'limit': 'limit',
            'query': 'query',
            'sort': 'sort',
            'select': 'select'
        }

        self._key = None
        self._skip = None
        self._limit = None
        self._query = None
        self._sort = None
        self._select = None

    @property
    def key(self):
        """
        Gets the key of this CloudQuery.


        :return: The key of this CloudQuery.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this CloudQuery.


        :param key: The key of this CloudQuery.
        :type: str
        """
        self._key = key

    @property
    def skip(self):
        """
        Gets the skip of this CloudQuery.


        :return: The skip of this CloudQuery.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """
        Sets the skip of this CloudQuery.


        :param skip: The skip of this CloudQuery.
        :type: int
        """
        self._skip = skip

    @property
    def limit(self):
        """
        Gets the limit of this CloudQuery.


        :return: The limit of this CloudQuery.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this CloudQuery.


        :param limit: The limit of this CloudQuery.
        :type: int
        """
        self._limit = limit

    @property
    def query(self):
        """
        Gets the query of this CloudQuery.


        :return: The query of this CloudQuery.
        :rtype: Query
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this CloudQuery.


        :param query: The query of this CloudQuery.
        :type: Query
        """
        self._query = query

    @property
    def sort(self):
        """
        Gets the sort of this CloudQuery.


        :return: The sort of this CloudQuery.
        :rtype: object
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this CloudQuery.


        :param sort: The sort of this CloudQuery.
        :type: object
        """
        self._sort = sort

    @property
    def select(self):
        """
        Gets the select of this CloudQuery.


        :return: The select of this CloudQuery.
        :rtype: object
        """
        return self._select

    @select.setter
    def select(self, select):
        """
        Sets the select of this CloudQuery.


        :param select: The select of this CloudQuery.
        :type: object
        """
        self._select = select

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

