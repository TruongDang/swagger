# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Queue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Queue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'table_name': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'acl': 'ACL',
            'type': 'str',
            'expires': 'datetime',
            'queue_type': 'str',
            'retry': 'str',
            'name': 'str',
            'subscribers': 'list[str]',
            'messages': 'list[QueueMessage]'
        }

        self.attribute_map = {
            'id': '_id',
            'table_name': '_tableName',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'acl': 'ACL',
            'type': '_type',
            'expires': 'expires',
            'queue_type': 'queueType',
            'retry': 'retry',
            'name': 'name',
            'subscribers': 'subscribers',
            'messages': 'messages'
        }

        self._id = None
        self._table_name = '_Queue'
        self._created_at = None
        self._updated_at = None
        self._acl = None
        self._type = 'queue'
        self._expires = None
        self._queue_type = 'pull'
        self._retry = None
        self._name = None
        self._subscribers = None
        self._messages = None

    @property
    def id(self):
        """
        Gets the id of this Queue.


        :return: The id of this Queue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Queue.


        :param id: The id of this Queue.
        :type: str
        """
        self._id = id

    @property
    def table_name(self):
        """
        Gets the table_name of this Queue.


        :return: The table_name of this Queue.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this Queue.


        :param table_name: The table_name of this Queue.
        :type: str
        """
        self._table_name = table_name

    @property
    def created_at(self):
        """
        Gets the created_at of this Queue.


        :return: The created_at of this Queue.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Queue.


        :param created_at: The created_at of this Queue.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Queue.


        :return: The updated_at of this Queue.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Queue.


        :param updated_at: The updated_at of this Queue.
        :type: datetime
        """
        self._updated_at = updated_at

    @property
    def acl(self):
        """
        Gets the acl of this Queue.


        :return: The acl of this Queue.
        :rtype: ACL
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """
        Sets the acl of this Queue.


        :param acl: The acl of this Queue.
        :type: ACL
        """
        self._acl = acl

    @property
    def type(self):
        """
        Gets the type of this Queue.


        :return: The type of this Queue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Queue.


        :param type: The type of this Queue.
        :type: str
        """
        self._type = type

    @property
    def expires(self):
        """
        Gets the expires of this Queue.


        :return: The expires of this Queue.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """
        Sets the expires of this Queue.


        :param expires: The expires of this Queue.
        :type: datetime
        """
        self._expires = expires

    @property
    def queue_type(self):
        """
        Gets the queue_type of this Queue.


        :return: The queue_type of this Queue.
        :rtype: str
        """
        return self._queue_type

    @queue_type.setter
    def queue_type(self, queue_type):
        """
        Sets the queue_type of this Queue.


        :param queue_type: The queue_type of this Queue.
        :type: str
        """
        self._queue_type = queue_type

    @property
    def retry(self):
        """
        Gets the retry of this Queue.


        :return: The retry of this Queue.
        :rtype: str
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """
        Sets the retry of this Queue.


        :param retry: The retry of this Queue.
        :type: str
        """
        self._retry = retry

    @property
    def name(self):
        """
        Gets the name of this Queue.


        :return: The name of this Queue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Queue.


        :param name: The name of this Queue.
        :type: str
        """
        self._name = name

    @property
    def subscribers(self):
        """
        Gets the subscribers of this Queue.


        :return: The subscribers of this Queue.
        :rtype: list[str]
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """
        Sets the subscribers of this Queue.


        :param subscribers: The subscribers of this Queue.
        :type: list[str]
        """
        self._subscribers = subscribers

    @property
    def messages(self):
        """
        Gets the messages of this Queue.


        :return: The messages of this Queue.
        :rtype: list[QueueMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this Queue.


        :param messages: The messages of this Queue.
        :type: list[QueueMessage]
        """
        self._messages = messages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

