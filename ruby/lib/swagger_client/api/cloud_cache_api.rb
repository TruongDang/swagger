=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require "uri"

module SwaggerClient
  class CloudCacheApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # clear all items from a cloud cache
    # clear all items from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<CacheRequest>]
    def clear_cache(app_id, cache_name, body, opts = {})
      data, status_code, headers = clear_cache_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # clear all items from a cloud cache
    # clear all items from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CacheRequest>, Fixnum, Hash)>] Array<CacheRequest> data, response status code and response headers
    def clear_cache_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#clear_cache ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling clear_cache" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling clear_cache" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling clear_cache" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/clear".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CacheRequest>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#clear_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a cloud cache
    # create a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Cache]
    def create_cache(app_id, cache_name, body, opts = {})
      data, status_code, headers = create_cache_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # create a cloud cache
    # create a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cache, Fixnum, Hash)>] Cache data, response status code and response headers
    def create_cache_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#create_cache ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling create_cache" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling create_cache" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling create_cache" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/create".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cache')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#create_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete all CloudCaches
    # delete all CloudCaches
    # @param app_id Id of CloudApp
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<CacheRequest>]
    def delete_all_cache(app_id, body, opts = {})
      data, status_code, headers = delete_all_cache_with_http_info(app_id, body, opts)
      return data
    end

    # delete all CloudCaches
    # delete all CloudCaches
    # @param app_id Id of CloudApp
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CacheRequest>, Fixnum, Hash)>] Array<CacheRequest> data, response status code and response headers
    def delete_all_cache_with_http_info(app_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#delete_all_cache ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_all_cache" if app_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_all_cache" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CacheRequest>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#delete_all_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a CloudCache
    # delete a CloudCache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [CacheRequest]
    def delete_cache(app_id, cache_name, body, opts = {})
      data, status_code, headers = delete_cache_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # delete a CloudCache
    # delete a CloudCache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(CacheRequest, Fixnum, Hash)>] CacheRequest data, response status code and response headers
    def delete_cache_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#delete_cache ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_cache" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling delete_cache" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_cache" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CacheRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#delete_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete item from a cloud cache
    # delete item from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data to delete is cached
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_item(app_id, cache_name, data_key, body, opts = {})
      data, status_code, headers = delete_item_with_http_info(app_id, cache_name, data_key, body, opts)
      return data
    end

    # delete item from a cloud cache
    # delete item from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data to delete is cached
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_item_with_http_info(app_id, cache_name, data_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#delete_item ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_item" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling delete_item" if cache_name.nil?
      
      # verify the required parameter 'data_key' is set
      fail "Missing the required parameter 'data_key' when calling delete_item" if data_key.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_item" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/item/{data_key}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s).sub('{' + 'data_key' + '}', data_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#delete_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all CloudCaches
    # get all CloudCaches
    # @param app_id Id of CloudApp
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<Cache>]
    def get_all_cache(app_id, body, opts = {})
      data, status_code, headers = get_all_cache_with_http_info(app_id, body, opts)
      return data
    end

    # get all CloudCaches
    # get all CloudCaches
    # @param app_id Id of CloudApp
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Cache>, Fixnum, Hash)>] Array<Cache> data, response status code and response headers
    def get_all_cache_with_http_info(app_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#get_all_cache ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_all_cache" if app_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_all_cache" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Cache>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#get_all_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all items from a cloud cache
    # get all items from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<CacheItem>]
    def get_all_items(app_id, cache_name, body, opts = {})
      data, status_code, headers = get_all_items_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # get all items from a cloud cache
    # get all items from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CacheItem>, Fixnum, Hash)>] Array<CacheItem> data, response status code and response headers
    def get_all_items_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#get_all_items ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_all_items" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling get_all_items" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_all_items" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/items".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CacheItem>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#get_all_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get info about a CloudCache
    # get info about a CloudCache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Cache]
    def get_cache_info(app_id, cache_name, body, opts = {})
      data, status_code, headers = get_cache_info_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # get info about a CloudCache
    # get info about a CloudCache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cache, Fixnum, Hash)>] Cache data, response status code and response headers
    def get_cache_info_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#get_cache_info ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_cache_info" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling get_cache_info" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_cache_info" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cache')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#get_cache_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get item from a cloud cache
    # get item from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data should be got in cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_item(app_id, cache_name, data_key, body, opts = {})
      data, status_code, headers = get_item_with_http_info(app_id, cache_name, data_key, body, opts)
      return data
    end

    # get item from a cloud cache
    # get item from a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data should be got in cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_item_with_http_info(app_id, cache_name, data_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#get_item ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_item" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling get_item" if cache_name.nil?
      
      # verify the required parameter 'data_key' is set
      fail "Missing the required parameter 'data_key' when calling get_item" if data_key.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_item" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/{data_key}/item".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s).sub('{' + 'data_key' + '}', data_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#get_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # count items in a cloud cache
    # count items in a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_items_count(app_id, cache_name, body, opts = {})
      data, status_code, headers = get_items_count_with_http_info(app_id, cache_name, body, opts)
      return data
    end

    # count items in a cloud cache
    # count items in a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param body master key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_items_count_with_http_info(app_id, cache_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#get_items_count ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_items_count" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling get_items_count" if cache_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_items_count" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/items/count".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#get_items_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # add item to a cloud cache
    # add item to a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data should be store in cache
    # @param body cache data and master key included got from this object
    # @param [Hash] opts the optional parameters
    # @return [String]
    def set(app_id, cache_name, data_key, body, opts = {})
      data, status_code, headers = set_with_http_info(app_id, cache_name, data_key, body, opts)
      return data
    end

    # add item to a cloud cache
    # add item to a cloud cache
    # @param app_id Id of CloudApp
    # @param cache_name Name of cache
    # @param data_key key under which data should be store in cache
    # @param body cache data and master key included got from this object
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def set_with_http_info(app_id, cache_name, data_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudCacheApi#set ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling set" if app_id.nil?
      
      # verify the required parameter 'cache_name' is set
      fail "Missing the required parameter 'cache_name' when calling set" if cache_name.nil?
      
      # verify the required parameter 'data_key' is set
      fail "Missing the required parameter 'data_key' when calling set" if data_key.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling set" if body.nil?
      
      # resource path
      local_var_path = "cache/{app_id}/{cache_name}/{data_key}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'cache_name' + '}', cache_name.to_s).sub('{' + 'data_key' + '}', data_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/plain;charset=utf-8']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCacheApi#set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
