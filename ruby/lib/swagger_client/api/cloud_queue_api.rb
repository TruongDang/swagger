=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require "uri"

module SwaggerClient
  class CloudQueueApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # push message to queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def add_message(app_id, queue_name, body, opts = {})
      data, status_code, headers = add_message_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # push message to queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def add_message_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#add_message ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling add_message" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling add_message" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling add_message" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/message".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#add_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # add a subscriber to this queue
    # add a subscriber to this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body payload
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def add_subscriber(app_id, queue_name, body, opts = {})
      data, status_code, headers = add_subscriber_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # add a subscriber to this queue
    # add a subscriber to this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def add_subscriber_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#add_subscriber ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling add_subscriber" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling add_subscriber" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling add_subscriber" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/subscriber".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#add_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # clear queue
    # clear queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def clear(app_id, queue_name, body, opts = {})
      data, status_code, headers = clear_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # clear queue
    # clear queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def clear_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#clear ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling clear" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling clear" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling clear" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/clear".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#clear\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a new queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param queue_name name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def create_queue(app_id, queue_name, body, opts = {})
      data, status_code, headers = create_queue_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # create a new queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param queue_name name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def create_queue_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#create_queue ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling create_queue" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling create_queue" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling create_queue" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/create".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#create_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a message in this queue
    # delete a message in this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def delete_message(app_id, queue_name, message_id, body, opts = {})
      data, status_code, headers = delete_message_with_http_info(app_id, queue_name, message_id, body, opts)
      return data
    end

    # delete a message in this queue
    # delete a message in this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def delete_message_with_http_info(app_id, queue_name, message_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#delete_message ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_message" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling delete_message" if queue_name.nil?
      
      # verify the required parameter 'message_id' is set
      fail "Missing the required parameter 'message_id' when calling delete_message" if message_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_message" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/message/{message_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#delete_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a queue
    # delete queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def delete_queue(app_id, queue_name, body, opts = {})
      data, status_code, headers = delete_queue_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # delete a queue
    # delete queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def delete_queue_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#delete_queue ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_queue" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling delete_queue" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_queue" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#delete_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a subscriber to this queue
    # delete a subscriber to this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body payload
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def delete_subscriber(app_id, queue_name, body, opts = {})
      data, status_code, headers = delete_subscriber_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # delete a subscriber to this queue
    # delete a subscriber to this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def delete_subscriber_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#delete_subscriber ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_subscriber" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling delete_subscriber" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling delete_subscriber" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/subscriber".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#delete_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # push message to queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def get_all_messages(app_id, body, opts = {})
      data, status_code, headers = get_all_messages_with_http_info(app_id, body, opts)
      return data
    end

    # push message to queue
    # add message message to queue
    # @param app_id Id of CloudApp
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def get_all_messages_with_http_info(app_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#get_all_messages ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_all_messages" if app_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_all_messages" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/messages".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#get_all_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all queues
    # get all queues
    # @param app_id Id of CloudApp
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<Queue>]
    def get_all_queues(app_id, body, opts = {})
      data, status_code, headers = get_all_queues_with_http_info(app_id, body, opts)
      return data
    end

    # get all queues
    # get all queues
    # @param app_id Id of CloudApp
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Queue>, Fixnum, Hash)>] Array<Queue> data, response status code and response headers
    def get_all_queues_with_http_info(app_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#get_all_queues ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_all_queues" if app_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_all_queues" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/plain;charset=utf-8']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Queue>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#get_all_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get messages in queue
    # get messages in queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def get_message(app_id, queue_name, body, opts = {})
      data, status_code, headers = get_message_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # get messages in queue
    # get messages in queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def get_message_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#get_message ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_message" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling get_message" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_message" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/getMessage".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get a message in this queue by its id
    # get a message in this queue by its id
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [QueueMessage]
    def get_message_by_id(app_id, queue_name, message_id, body, opts = {})
      data, status_code, headers = get_message_by_id_with_http_info(app_id, queue_name, message_id, body, opts)
      return data
    end

    # get a message in this queue by its id
    # get a message in this queue by its id
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMessage, Fixnum, Hash)>] QueueMessage data, response status code and response headers
    def get_message_by_id_with_http_info(app_id, queue_name, message_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#get_message_by_id ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_message_by_id" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling get_message_by_id" if queue_name.nil?
      
      # verify the required parameter 'message_id' is set
      fail "Missing the required parameter 'message_id' when calling get_message_by_id" if message_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_message_by_id" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/message/{message_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#get_message_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get queue
    # get queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def get_queue(app_id, queue_name, body, opts = {})
      data, status_code, headers = get_queue_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # get queue
    # get queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def get_queue_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#get_queue ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling get_queue" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling get_queue" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling get_queue" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#get_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # peek messages in queue without removing them
    # peek messages in queue without removing them
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def peek(app_id, queue_name, body, opts = {})
      data, status_code, headers = peek_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # peek messages in queue without removing them
    # peek messages in queue without removing them
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def peek_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#peek ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling peek" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling peek" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling peek" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/peek".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#peek\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # peek messages in queue without removing them
    # peek messages in queue without removing them
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def peek_message(app_id, queue_name, body, opts = {})
      data, status_code, headers = peek_message_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # peek messages in queue without removing them
    # peek messages in queue without removing them
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def peek_message_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#peek_message ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling peek_message" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling peek_message" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling peek_message" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/peekMessage".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#peek_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # pull messages from queue
    # pull messages from queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def pull(app_id, queue_name, body, opts = {})
      data, status_code, headers = pull_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # pull messages from queue
    # pull messages from queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def pull_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#pull ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling pull" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling pull" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling pull" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/pull".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#pull\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # refresh timeout of a message in this queue
    # refresh timeout of a message in this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def refresh_message_timeout(app_id, queue_name, message_id, body, opts = {})
      data, status_code, headers = refresh_message_timeout_with_http_info(app_id, queue_name, message_id, body, opts)
      return data
    end

    # refresh timeout of a message in this queue
    # refresh timeout of a message in this queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param message_id message id
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def refresh_message_timeout_with_http_info(app_id, queue_name, message_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#refresh_message_timeout ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling refresh_message_timeout" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling refresh_message_timeout" if queue_name.nil?
      
      # verify the required parameter 'message_id' is set
      fail "Missing the required parameter 'message_id' when calling refresh_message_timeout" if message_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling refresh_message_timeout" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}/{message_id}/refresh-message-timeout".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#refresh_message_timeout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # push message to queue
    # add message message to queue
    # @param my_app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueMessage>]
    def update_message(my_app_id, queue_name, body, opts = {})
      data, status_code, headers = update_message_with_http_info(my_app_id, queue_name, body, opts)
      return data
    end

    # push message to queue
    # add message message to queue
    # @param my_app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueMessage>, Fixnum, Hash)>] Array<QueueMessage> data, response status code and response headers
    def update_message_with_http_info(my_app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#update_message ..."
      end
      
      # verify the required parameter 'my_app_id' is set
      fail "Missing the required parameter 'my_app_id' when calling update_message" if my_app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling update_message" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling update_message" if body.nil?
      
      # resource path
      local_var_path = "queue/{my_app_id}/{queue_name}/message".sub('{format}','json').sub('{' + 'my_app_id' + '}', my_app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<QueueMessage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#update_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update queue
    # update queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [ModifiedQueue]
    def update_queue(app_id, queue_name, body, opts = {})
      data, status_code, headers = update_queue_with_http_info(app_id, queue_name, body, opts)
      return data
    end

    # update queue
    # update queue
    # @param app_id Id of CloudApp
    # @param queue_name Name of queue
    # @param body client key of app
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModifiedQueue, Fixnum, Hash)>] ModifiedQueue data, response status code and response headers
    def update_queue_with_http_info(app_id, queue_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudQueueApi#update_queue ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling update_queue" if app_id.nil?
      
      # verify the required parameter 'queue_name' is set
      fail "Missing the required parameter 'queue_name' when calling update_queue" if queue_name.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling update_queue" if body.nil?
      
      # resource path
      local_var_path = "queue/{app_id}/{queue_name}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'queue_name' + '}', queue_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModifiedQueue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudQueueApi#update_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
