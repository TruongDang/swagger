=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require "uri"

module SwaggerClient
  class CloudFileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # deletes file
    # 
    # @param app_id ID of app
    # @param file_id file id
    # @param [Hash] opts the optional parameters
    # @option opts [KeyBody] :body request body
    # @return [String]
    def delete_file(app_id, file_id, opts = {})
      data, status_code, headers = delete_file_with_http_info(app_id, file_id, opts)
      return data
    end

    # deletes file
    # 
    # @param app_id ID of app
    # @param file_id file id
    # @param [Hash] opts the optional parameters
    # @option opts [KeyBody] :body request body
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_file_with_http_info(app_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudFileApi#delete_file ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling delete_file" if app_id.nil?
      
      # verify the required parameter 'file_id' is set
      fail "Missing the required parameter 'file_id' when calling delete_file" if file_id.nil?
      
      # resource path
      local_var_path = "file/{app_id}/{file_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudFileApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # fetch file content
    # 
    # @param app_id ID of app
    # @param file_id file id
    # @param [Hash] opts the optional parameters
    # @option opts [KeyBody] :body request body
    # @return [String]
    def fetch_file_content(app_id, file_id, opts = {})
      data, status_code, headers = fetch_file_content_with_http_info(app_id, file_id, opts)
      return data
    end

    # fetch file content
    # 
    # @param app_id ID of app
    # @param file_id file id
    # @param [Hash] opts the optional parameters
    # @option opts [KeyBody] :body request body
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def fetch_file_content_with_http_info(app_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudFileApi#fetch_file_content ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling fetch_file_content" if app_id.nil?
      
      # verify the required parameter 'file_id' is set
      fail "Missing the required parameter 'file_id' when calling fetch_file_content" if file_id.nil?
      
      # resource path
      local_var_path = "file/{app_id}/{file_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'application/octet-stream']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudFileApi#fetch_file_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # uploads a file
    # 
    # @param app_id ID of app
    # @param file_obj file extra data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key app key
    # @option opts [File] :file_to_upload file to upload
    # @return [String]
    def save_file(app_id, file_obj, opts = {})
      data, status_code, headers = save_file_with_http_info(app_id, file_obj, opts)
      return data
    end

    # uploads a file
    # 
    # @param app_id ID of app
    # @param file_obj file extra data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key app key
    # @option opts [File] :file_to_upload file to upload
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def save_file_with_http_info(app_id, file_obj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudFileApi#save_file ..."
      end
      
      # verify the required parameter 'app_id' is set
      fail "Missing the required parameter 'app_id' when calling save_file" if app_id.nil?
      
      # verify the required parameter 'file_obj' is set
      fail "Missing the required parameter 'file_obj' when calling save_file" if file_obj.nil?
      
      # resource path
      local_var_path = "file/{app_id}".sub('{format}','json').sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}
      form_params["fileObj"] = file_obj
      form_params["key"] = opts[:'key'] if opts[:'key']
      form_params["fileToUpload"] = opts[:'file_to_upload'] if opts[:'file_to_upload']

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudFileApi#save_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # uploads a file with data
    # 
    # @param my_app_id ID of app
    # @param file_obj file extra data
    # @param [Hash] opts the optional parameters
    # @return [String]
    def save_file_data(my_app_id, file_obj, opts = {})
      data, status_code, headers = save_file_data_with_http_info(my_app_id, file_obj, opts)
      return data
    end

    # uploads a file with data
    # 
    # @param my_app_id ID of app
    # @param file_obj file extra data
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def save_file_data_with_http_info(my_app_id, file_obj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CloudFileApi#save_file_data ..."
      end
      
      # verify the required parameter 'my_app_id' is set
      fail "Missing the required parameter 'my_app_id' when calling save_file_data" if my_app_id.nil?
      
      # verify the required parameter 'file_obj' is set
      fail "Missing the required parameter 'file_obj' when calling save_file_data" if file_obj.nil?
      
      # resource path
      local_var_path = "file/{my_app_id}".sub('{format}','json').sub('{' + 'my_app_id' + '}', my_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(file_obj)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudFileApi#save_file_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
