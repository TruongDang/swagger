=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CloudQueryApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CloudQueryApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CloudQueryApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudQueryApi' do
    it 'should create an instact of CloudQueryApi' do
      @instance.should be_a(SwaggerClient::CloudQueryApi)
    end
  end

  # unit tests for count
  # count items in a table that match this query criteria
  # count items in a table that match this query criteria
  # @param app_id CloudApp id
  # @param table_name cloud table name
  # @param body query body
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'count test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for distinct
  # distinct query criteria
  # 
  # @param app_id CloudApp id
  # @param table_name cloud table name
  # @param body query body
  # @param [Hash] opts the optional parameters
  # @return [Array<CloudObject>]
  describe 'distinct test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for find
  # find CloudObject meeting this query criteria
  # 
  # @param app_id CloudApp id
  # @param table_name cloud table name
  # @param body query object
  # @param [Hash] opts the optional parameters
  # @return [Array<CloudObject>]
  describe 'find test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for find_by_id
  # find CloudObject with specific _id
  # 
  # @param cloud_app_id CloudApp id
  # @param table_name cloud table name
  # @param body query body
  # @param [Hash] opts the optional parameters
  # @return [CloudObject]
  describe 'find_by_id test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for find_one
  # find a single CloudObject
  # 
  # @param app_id CloudApp id
  # @param table_name cloud table name
  # @param body query body
  # @param [Hash] opts the optional parameters
  # @return [CloudObject]
  describe 'find_one test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
