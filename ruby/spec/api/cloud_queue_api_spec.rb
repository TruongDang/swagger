=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CloudQueueApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CloudQueueApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CloudQueueApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudQueueApi' do
    it 'should create an instact of CloudQueueApi' do
      @instance.should be_a(SwaggerClient::CloudQueueApi)
    end
  end

  # unit tests for add_message
  # push message to queue
  # add message message to queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'add_message test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_subscriber
  # add a subscriber to this queue
  # add a subscriber to this queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body payload
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'add_subscriber test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for clear
  # clear queue
  # clear queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'clear test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_queue
  # create a new queue
  # add message message to queue
  # @param app_id Id of CloudApp
  # @param queue_name name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'create_queue test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_message
  # delete a message in this queue
  # delete a message in this queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param message_id message id
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'delete_message test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_queue
  # delete a queue
  # delete queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'delete_queue test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_subscriber
  # delete a subscriber to this queue
  # delete a subscriber to this queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body payload
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'delete_subscriber test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_all_messages
  # push message to queue
  # add message message to queue
  # @param app_id Id of CloudApp
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'get_all_messages test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_all_queues
  # get all queues
  # get all queues
  # @param app_id Id of CloudApp
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<Queue>]
  describe 'get_all_queues test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_message
  # get messages in queue
  # get messages in queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'get_message test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_message_by_id
  # get a message in this queue by its id
  # get a message in this queue by its id
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param message_id message id
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [QueueMessage]
  describe 'get_message_by_id test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_queue
  # get queue
  # get queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Queue]
  describe 'get_queue test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for peek
  # peek messages in queue without removing them
  # peek messages in queue without removing them
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'peek test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for peek_message
  # peek messages in queue without removing them
  # peek messages in queue without removing them
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'peek_message test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for pull
  # pull messages from queue
  # pull messages from queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'pull test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for refresh_message_timeout
  # refresh timeout of a message in this queue
  # refresh timeout of a message in this queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param message_id message id
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'refresh_message_timeout test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_message
  # push message to queue
  # add message message to queue
  # @param my_app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<QueueMessage>]
  describe 'update_message test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_queue
  # update queue
  # update queue
  # @param app_id Id of CloudApp
  # @param queue_name Name of queue
  # @param body client key of app
  # @param [Hash] opts the optional parameters
  # @return [ModifiedQueue]
  describe 'update_queue test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
