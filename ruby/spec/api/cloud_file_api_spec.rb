=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CloudFileApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CloudFileApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CloudFileApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudFileApi' do
    it 'should create an instact of CloudFileApi' do
      @instance.should be_a(SwaggerClient::CloudFileApi)
    end
  end

  # unit tests for delete_file
  # deletes file
  # 
  # @param app_id ID of app
  # @param file_id file id
  # @param [Hash] opts the optional parameters
  # @option opts [KeyBody] :body request body
  # @return [String]
  describe 'delete_file test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for fetch_file_content
  # fetch file content
  # 
  # @param app_id ID of app
  # @param file_id file id
  # @param [Hash] opts the optional parameters
  # @option opts [KeyBody] :body request body
  # @return [String]
  describe 'fetch_file_content test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for save_file
  # uploads a file
  # 
  # @param app_id ID of app
  # @param file_obj file extra data
  # @param [Hash] opts the optional parameters
  # @option opts [String] :key app key
  # @option opts [File] :file_to_upload file to upload
  # @return [String]
  describe 'save_file test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for save_file_data
  # uploads a file with data
  # 
  # @param my_app_id ID of app
  # @param file_obj file extra data
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'save_file_data test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
