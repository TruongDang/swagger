=begin
CloudBoost Application API

Power your web or mobile application backend with cloudboost Database Service

OpenAPI spec version: 1.0.0
Contact: ben@cloudboost.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: MIT
http://opensource.org/licenses/MIT

Terms of Service: https://cloudboost.io

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CloudCacheApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CloudCacheApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CloudCacheApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudCacheApi' do
    it 'should create an instact of CloudCacheApi' do
      @instance.should be_a(SwaggerClient::CloudCacheApi)
    end
  end

  # unit tests for clear_cache
  # clear all items from a cloud cache
  # clear all items from a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<CacheRequest>]
  describe 'clear_cache test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for create_cache
  # create a cloud cache
  # create a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Cache]
  describe 'create_cache test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_all_cache
  # delete all CloudCaches
  # delete all CloudCaches
  # @param app_id Id of CloudApp
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<CacheRequest>]
  describe 'delete_all_cache test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_cache
  # delete a CloudCache
  # delete a CloudCache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [CacheRequest]
  describe 'delete_cache test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_item
  # delete item from a cloud cache
  # delete item from a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param data_key key under which data to delete is cached
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'delete_item test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_all_cache
  # get all CloudCaches
  # get all CloudCaches
  # @param app_id Id of CloudApp
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<Cache>]
  describe 'get_all_cache test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_all_items
  # get all items from a cloud cache
  # get all items from a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Array<CacheItem>]
  describe 'get_all_items test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_cache_info
  # get info about a CloudCache
  # get info about a CloudCache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Cache]
  describe 'get_cache_info test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_item
  # get item from a cloud cache
  # get item from a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param data_key key under which data should be got in cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_item test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_items_count
  # count items in a cloud cache
  # count items in a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param body master key of app
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'get_items_count test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for set
  # add item to a cloud cache
  # add item to a cloud cache
  # @param app_id Id of CloudApp
  # @param cache_name Name of cache
  # @param data_key key under which data should be store in cache
  # @param body cache data and master key included got from this object
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'set test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
