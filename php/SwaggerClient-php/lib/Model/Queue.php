<?php
/**
 * Queue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Queue Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Queue implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        '_id' => 'string',
        '_table_name' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'acl' => '\Swagger\Client\Model\ACL',
        '_type' => 'string',
        'expires' => '\DateTime',
        'queue_type' => 'string',
        'retry' => 'string',
        'name' => 'string',
        'subscribers' => 'string[]',
        'messages' => '\Swagger\Client\Model\QueueMessage[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        '_id' => '_id',
        '_table_name' => '_tableName',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'acl' => 'ACL',
        '_type' => '_type',
        'expires' => 'expires',
        'queue_type' => 'queueType',
        'retry' => 'retry',
        'name' => 'name',
        'subscribers' => 'subscribers',
        'messages' => 'messages'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        '_id' => 'setId',
        '_table_name' => 'setTableName',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'acl' => 'setAcl',
        '_type' => 'setType',
        'expires' => 'setExpires',
        'queue_type' => 'setQueueType',
        'retry' => 'setRetry',
        'name' => 'setName',
        'subscribers' => 'setSubscribers',
        'messages' => 'setMessages'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        '_id' => 'getId',
        '_table_name' => 'getTableName',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'acl' => 'getAcl',
        '_type' => 'getType',
        'expires' => 'getExpires',
        'queue_type' => 'getQueueType',
        'retry' => 'getRetry',
        'name' => 'getName',
        'subscribers' => 'getSubscribers',
        'messages' => 'getMessages'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $_id 
      * @var string
      */
    protected $_id;
    
    /**
      * $_table_name 
      * @var string
      */
    protected $_table_name = '_Queue';
    
    /**
      * $created_at 
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at 
      * @var \DateTime
      */
    protected $updated_at;
    
    /**
      * $acl 
      * @var \Swagger\Client\Model\ACL
      */
    protected $acl;
    
    /**
      * $_type 
      * @var string
      */
    protected $_type = 'queue';
    
    /**
      * $expires 
      * @var \DateTime
      */
    protected $expires;
    
    /**
      * $queue_type 
      * @var string
      */
    protected $queue_type = 'pull';
    
    /**
      * $retry 
      * @var string
      */
    protected $retry;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $subscribers 
      * @var string[]
      */
    protected $subscribers;
    
    /**
      * $messages 
      * @var \Swagger\Client\Model\QueueMessage[]
      */
    protected $messages;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->_id = $data["_id"];
            $this->_table_name = $data["_table_name"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
            $this->acl = $data["acl"];
            $this->_type = $data["_type"];
            $this->expires = $data["expires"];
            $this->queue_type = $data["queue_type"];
            $this->retry = $data["retry"];
            $this->name = $data["name"];
            $this->subscribers = $data["subscribers"];
            $this->messages = $data["messages"];
        }
    }
    
    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->_id;
    }
  
    /**
     * Sets _id
     * @param string $_id 
     * @return $this
     */
    public function setId($_id)
    {
        
        $this->_id = $_id;
        return $this;
    }
    
    /**
     * Gets _table_name
     * @return string
     */
    public function getTableName()
    {
        return $this->_table_name;
    }
  
    /**
     * Sets _table_name
     * @param string $_table_name 
     * @return $this
     */
    public function setTableName($_table_name)
    {
        
        $this->_table_name = $_table_name;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at 
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at 
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Gets acl
     * @return \Swagger\Client\Model\ACL
     */
    public function getAcl()
    {
        return $this->acl;
    }
  
    /**
     * Sets acl
     * @param \Swagger\Client\Model\ACL $acl 
     * @return $this
     */
    public function setAcl($acl)
    {
        
        $this->acl = $acl;
        return $this;
    }
    
    /**
     * Gets _type
     * @return string
     */
    public function getType()
    {
        return $this->_type;
    }
  
    /**
     * Sets _type
     * @param string $_type 
     * @return $this
     */
    public function setType($_type)
    {
        
        $this->_type = $_type;
        return $this;
    }
    
    /**
     * Gets expires
     * @return \DateTime
     */
    public function getExpires()
    {
        return $this->expires;
    }
  
    /**
     * Sets expires
     * @param \DateTime $expires 
     * @return $this
     */
    public function setExpires($expires)
    {
        
        $this->expires = $expires;
        return $this;
    }
    
    /**
     * Gets queue_type
     * @return string
     */
    public function getQueueType()
    {
        return $this->queue_type;
    }
  
    /**
     * Sets queue_type
     * @param string $queue_type 
     * @return $this
     */
    public function setQueueType($queue_type)
    {
        
        $this->queue_type = $queue_type;
        return $this;
    }
    
    /**
     * Gets retry
     * @return string
     */
    public function getRetry()
    {
        return $this->retry;
    }
  
    /**
     * Sets retry
     * @param string $retry 
     * @return $this
     */
    public function setRetry($retry)
    {
        
        $this->retry = $retry;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets subscribers
     * @return string[]
     */
    public function getSubscribers()
    {
        return $this->subscribers;
    }
  
    /**
     * Sets subscribers
     * @param string[] $subscribers 
     * @return $this
     */
    public function setSubscribers($subscribers)
    {
        
        $this->subscribers = $subscribers;
        return $this;
    }
    
    /**
     * Gets messages
     * @return \Swagger\Client\Model\QueueMessage[]
     */
    public function getMessages()
    {
        return $this->messages;
    }
  
    /**
     * Sets messages
     * @param \Swagger\Client\Model\QueueMessage[] $messages 
     * @return $this
     */
    public function setMessages($messages)
    {
        
        $this->messages = $messages;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
