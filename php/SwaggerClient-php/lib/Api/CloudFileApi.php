<?php
/**
 * CloudFileApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CloudFileApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloudFileApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.cloudboost.io/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return CloudFileApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * deleteFile
     *
     * deletes file
     *
     * @param string $app_id ID of app (required)
     * @param string $file_id file id (required)
     * @param \Swagger\Client\Model\KeyBody $body request body (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFile($app_id, $file_id, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteFileWithHttpInfo ($app_id, $file_id, $body);
        return $response; 
    }


    /**
     * deleteFileWithHttpInfo
     *
     * deletes file
     *
     * @param string $app_id ID of app (required)
     * @param string $file_id file id (required)
     * @param \Swagger\Client\Model\KeyBody $body request body (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFileWithHttpInfo($app_id, $file_id, $body = null)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling deleteFile');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling deleteFile');
        }
  
        // parse inputs
        $resourcePath = "file/{app_id}/{file_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($file_id !== null) {
            $resourcePath = str_replace(
                "{" . "file_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * fetchFileContent
     *
     * fetch file content
     *
     * @param string $app_id ID of app (required)
     * @param string $file_id file id (required)
     * @param \Swagger\Client\Model\KeyBody $body request body (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function fetchFileContent($app_id, $file_id, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->fetchFileContentWithHttpInfo ($app_id, $file_id, $body);
        return $response; 
    }


    /**
     * fetchFileContentWithHttpInfo
     *
     * fetch file content
     *
     * @param string $app_id ID of app (required)
     * @param string $file_id file id (required)
     * @param \Swagger\Client\Model\KeyBody $body request body (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function fetchFileContentWithHttpInfo($app_id, $file_id, $body = null)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling fetchFileContent');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling fetchFileContent');
        }
  
        // parse inputs
        $resourcePath = "file/{app_id}/{file_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/octet-stream'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($file_id !== null) {
            $resourcePath = str_replace(
                "{" . "file_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * saveFile
     *
     * uploads a file
     *
     * @param string $app_id ID of app (required)
     * @param string $file_obj file extra data (required)
     * @param string $key app key (optional)
     * @param \SplFileObject $file_to_upload file to upload (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveFile($app_id, $file_obj, $key = null, $file_to_upload = null)
    {
        list($response, $statusCode, $httpHeader) = $this->saveFileWithHttpInfo ($app_id, $file_obj, $key, $file_to_upload);
        return $response; 
    }


    /**
     * saveFileWithHttpInfo
     *
     * uploads a file
     *
     * @param string $app_id ID of app (required)
     * @param string $file_obj file extra data (required)
     * @param string $key app key (optional)
     * @param \SplFileObject $file_to_upload file to upload (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveFileWithHttpInfo($app_id, $file_obj, $key = null, $file_to_upload = null)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling saveFile');
        }
        // verify the required parameter 'file_obj' is set
        if ($file_obj === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_obj when calling saveFile');
        }
  
        // parse inputs
        $resourcePath = "file/{app_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('multipart/form-data'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($key !== null) {
            
            
            $formParams['key'] = $this->apiClient->getSerializer()->toFormValue($key);
            
        }// form params
        if ($file_obj !== null) {
            
            
            $formParams['fileObj'] = $this->apiClient->getSerializer()->toFormValue($file_obj);
            
        }// form params
        if ($file_to_upload !== null) {
            
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['fileToUpload'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_to_upload));
            } else {
               $formParams['fileToUpload'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_to_upload);
            }
            
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * saveFileData
     *
     * uploads a file with data
     *
     * @param string $my_app_id ID of app (required)
     * @param \Swagger\Client\Model\FileBody $file_obj file extra data (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveFileData($my_app_id, $file_obj)
    {
        list($response, $statusCode, $httpHeader) = $this->saveFileDataWithHttpInfo ($my_app_id, $file_obj);
        return $response; 
    }


    /**
     * saveFileDataWithHttpInfo
     *
     * uploads a file with data
     *
     * @param string $my_app_id ID of app (required)
     * @param \Swagger\Client\Model\FileBody $file_obj file extra data (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveFileDataWithHttpInfo($my_app_id, $file_obj)
    {
        
        // verify the required parameter 'my_app_id' is set
        if ($my_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $my_app_id when calling saveFileData');
        }
        // verify the required parameter 'file_obj' is set
        if ($file_obj === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_obj when calling saveFileData');
        }
  
        // parse inputs
        $resourcePath = "file/{my_app_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($my_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "my_app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($my_app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($file_obj)) {
            $_tempBody = $file_obj;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
