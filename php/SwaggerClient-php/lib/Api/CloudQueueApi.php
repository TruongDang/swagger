<?php
/**
 * CloudQueueApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CloudQueueApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloudQueueApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.cloudboost.io/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return CloudQueueApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addMessage
     *
     * push message to queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addMessage($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->addMessageWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * addMessageWithHttpInfo
     *
     * push message to queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addMessageWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling addMessage');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling addMessage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addMessage');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/message";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addSubscriber
     *
     * add a subscriber to this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body payload (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addSubscriber($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->addSubscriberWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * addSubscriberWithHttpInfo
     *
     * add a subscriber to this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body payload (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addSubscriberWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling addSubscriber');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling addSubscriber');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addSubscriber');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/subscriber";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * clear
     *
     * clear queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function clear($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->clearWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * clearWithHttpInfo
     *
     * clear queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function clearWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling clear');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling clear');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling clear');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/clear";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createQueue
     *
     * create a new queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createQueue($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->createQueueWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * createQueueWithHttpInfo
     *
     * create a new queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createQueueWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling createQueue');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling createQueue');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createQueue');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteMessage
     *
     * delete a message in this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteMessage($app_id, $queue_name, $message_id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteMessageWithHttpInfo ($app_id, $queue_name, $message_id, $body);
        return $response; 
    }


    /**
     * deleteMessageWithHttpInfo
     *
     * delete a message in this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteMessageWithHttpInfo($app_id, $queue_name, $message_id, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling deleteMessage');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling deleteMessage');
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_id when calling deleteMessage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteMessage');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/message/{message_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }// path params
        
        if ($message_id !== null) {
            $resourcePath = str_replace(
                "{" . "message_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteQueue
     *
     * delete a queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteQueue($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteQueueWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * deleteQueueWithHttpInfo
     *
     * delete a queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteQueueWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling deleteQueue');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling deleteQueue');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteQueue');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteSubscriber
     *
     * delete a subscriber to this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body payload (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubscriber($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteSubscriberWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * deleteSubscriberWithHttpInfo
     *
     * delete a subscriber to this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body payload (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubscriberWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling deleteSubscriber');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling deleteSubscriber');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSubscriber');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/subscriber";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAllMessages
     *
     * push message to queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllMessages($app_id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllMessagesWithHttpInfo ($app_id, $body);
        return $response; 
    }


    /**
     * getAllMessagesWithHttpInfo
     *
     * push message to queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllMessagesWithHttpInfo($app_id, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling getAllMessages');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getAllMessages');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/messages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAllQueues
     *
     * get all queues
     *
     * @param string $app_id Id of CloudApp (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return \Swagger\Client\Model\Queue[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllQueues($app_id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllQueuesWithHttpInfo ($app_id, $body);
        return $response; 
    }


    /**
     * getAllQueuesWithHttpInfo
     *
     * get all queues
     *
     * @param string $app_id Id of CloudApp (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\Queue[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllQueuesWithHttpInfo($app_id, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling getAllQueues');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getAllQueues');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/plain;charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getMessage
     *
     * get messages in queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMessage($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->getMessageWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * getMessageWithHttpInfo
     *
     * get messages in queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMessageWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling getMessage');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling getMessage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getMessage');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/getMessage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getMessageById
     *
     * get a message in this queue by its id
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMessageById($app_id, $queue_name, $message_id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->getMessageByIdWithHttpInfo ($app_id, $queue_name, $message_id, $body);
        return $response; 
    }


    /**
     * getMessageByIdWithHttpInfo
     *
     * get a message in this queue by its id
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMessageByIdWithHttpInfo($app_id, $queue_name, $message_id, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling getMessageById');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling getMessageById');
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_id when calling getMessageById');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getMessageById');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/message/{message_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }// path params
        
        if ($message_id !== null) {
            $resourcePath = str_replace(
                "{" . "message_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getQueue
     *
     * get queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return \Swagger\Client\Model\Queue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getQueue($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->getQueueWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * getQueueWithHttpInfo
     *
     * get queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\KeyBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\Queue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getQueueWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling getQueue');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling getQueue');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getQueue');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Queue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Queue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Queue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * peek
     *
     * peek messages in queue without removing them
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function peek($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->peekWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * peekWithHttpInfo
     *
     * peek messages in queue without removing them
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function peekWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling peek');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling peek');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling peek');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/peek";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * peekMessage
     *
     * peek messages in queue without removing them
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function peekMessage($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->peekMessageWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * peekMessageWithHttpInfo
     *
     * peek messages in queue without removing them
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function peekMessageWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling peekMessage');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling peekMessage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling peekMessage');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/peekMessage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * pull
     *
     * pull messages from queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pull($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->pullWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * pullWithHttpInfo
     *
     * pull messages from queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueuePayloadWithCount $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pullWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling pull');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling pull');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling pull');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/pull";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * refreshMessageTimeout
     *
     * refresh timeout of a message in this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\RefreshMessageTimeoutBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refreshMessageTimeout($app_id, $queue_name, $message_id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->refreshMessageTimeoutWithHttpInfo ($app_id, $queue_name, $message_id, $body);
        return $response; 
    }


    /**
     * refreshMessageTimeoutWithHttpInfo
     *
     * refresh timeout of a message in this queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param string $message_id message id (required)
     * @param \Swagger\Client\Model\RefreshMessageTimeoutBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refreshMessageTimeoutWithHttpInfo($app_id, $queue_name, $message_id, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling refreshMessageTimeout');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling refreshMessageTimeout');
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_id when calling refreshMessageTimeout');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling refreshMessageTimeout');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}/{message_id}/refresh-message-timeout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }// path params
        
        if ($message_id !== null) {
            $resourcePath = str_replace(
                "{" . "message_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateMessage
     *
     * push message to queue
     *
     * @param string $my_app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\QueueMessage[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMessage($my_app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->updateMessageWithHttpInfo ($my_app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * updateMessageWithHttpInfo
     *
     * push message to queue
     *
     * @param string $my_app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\QueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\QueueMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMessageWithHttpInfo($my_app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'my_app_id' is set
        if ($my_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $my_app_id when calling updateMessage');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling updateMessage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateMessage');
        }
  
        // parse inputs
        $resourcePath = "queue/{my_app_id}/{queue_name}/message";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($my_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "my_app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($my_app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\QueueMessage[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\QueueMessage[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\QueueMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateQueue
     *
     * update queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\ModifiedQueueBody $body client key of app (required)
     * @return \Swagger\Client\Model\ModifiedQueue
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateQueue($app_id, $queue_name, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->updateQueueWithHttpInfo ($app_id, $queue_name, $body);
        return $response; 
    }


    /**
     * updateQueueWithHttpInfo
     *
     * update queue
     *
     * @param string $app_id Id of CloudApp (required)
     * @param string $queue_name Name of queue (required)
     * @param \Swagger\Client\Model\ModifiedQueueBody $body client key of app (required)
     * @return Array of \Swagger\Client\Model\ModifiedQueue, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateQueueWithHttpInfo($app_id, $queue_name, $body)
    {
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling updateQueue');
        }
        // verify the required parameter 'queue_name' is set
        if ($queue_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_name when calling updateQueue');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateQueue');
        }
  
        // parse inputs
        $resourcePath = "queue/{app_id}/{queue_name}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($app_id !== null) {
            $resourcePath = str_replace(
                "{" . "app_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($app_id),
                $resourcePath
            );
        }// path params
        
        if ($queue_name !== null) {
            $resourcePath = str_replace(
                "{" . "queue_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($queue_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\ModifiedQueue'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\ModifiedQueue', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ModifiedQueue', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
