// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [ACL]
            Decoders.addDecoder(clazz: [ACL].self) { (source: AnyObject) -> [ACL] in
                return Decoders.decode(clazz: [ACL].self, source: source)
            }
			// Decoder for ACL
            Decoders.addDecoder(clazz: ACL.self) { (source: AnyObject) -> ACL in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ACL()
                instance.read = Decoders.decodeOptional(clazz: Read.self, source: sourceDictionary["read"])
                instance.write = Decoders.decodeOptional(clazz: Write.self, source: sourceDictionary["write"])
                return instance
            }
			

			// Decoder for [Allow]
            Decoders.addDecoder(clazz: [Allow].self) { (source: AnyObject) -> [Allow] in
                return Decoders.decode(clazz: [Allow].self, source: source)
            }
			// Decoder for Allow
            Decoders.addDecoder(clazz: Allow.self) { (source: AnyObject) -> Allow in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Allow()
                instance.user = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user"])
                instance.role = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role"])
                return instance
            }
			

			// Decoder for [BoolFilter]
            Decoders.addDecoder(clazz: [BoolFilter].self) { (source: AnyObject) -> [BoolFilter] in
                return Decoders.decode(clazz: [BoolFilter].self, source: source)
            }
			// Decoder for BoolFilter
            Decoders.addDecoder(clazz: BoolFilter.self) { (source: AnyObject) -> BoolFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BoolFilter()
                instance.bool = Decoders.decodeOptional(clazz: SearchFilter.self, source: sourceDictionary["bool"])
                return instance
            }
			

			// Decoder for [BoolQuery]
            Decoders.addDecoder(clazz: [BoolQuery].self) { (source: AnyObject) -> [BoolQuery] in
                return Decoders.decode(clazz: [BoolQuery].self, source: source)
            }
			// Decoder for BoolQuery
            Decoders.addDecoder(clazz: BoolQuery.self) { (source: AnyObject) -> BoolQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BoolQuery()
                instance.bool = Decoders.decodeOptional(clazz: SearchQuery.self, source: sourceDictionary["bool"])
                return instance
            }
			

			// Decoder for [Cache]
            Decoders.addDecoder(clazz: [Cache].self) { (source: AnyObject) -> [Cache] in
                return Decoders.decode(clazz: [Cache].self, source: source)
            }
			// Decoder for Cache
            Decoders.addDecoder(clazz: Cache.self) { (source: AnyObject) -> Cache in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Cache()
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["size"])
                return instance
            }
			

			// Decoder for [CacheItem]
            Decoders.addDecoder(clazz: [CacheItem].self) { (source: AnyObject) -> [CacheItem] in
                return Decoders.decode(clazz: [CacheItem].self, source: source)
            }
			// Decoder for CacheItem
            Decoders.addDecoder(clazz: CacheItem.self) { (source: AnyObject) -> CacheItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CacheItem()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for [CacheRequest]
            Decoders.addDecoder(clazz: [CacheRequest].self) { (source: AnyObject) -> [CacheRequest] in
                return Decoders.decode(clazz: [CacheRequest].self, source: source)
            }
			// Decoder for CacheRequest
            Decoders.addDecoder(clazz: CacheRequest.self) { (source: AnyObject) -> CacheRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CacheRequest()
                instance.item = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [CloudFile]
            Decoders.addDecoder(clazz: [CloudFile].self) { (source: AnyObject) -> [CloudFile] in
                return Decoders.decode(clazz: [CloudFile].self, source: source)
            }
			// Decoder for CloudFile
            Decoders.addDecoder(clazz: CloudFile.self) { (source: AnyObject) -> CloudFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudFile()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.ACL = Decoders.decodeOptional(clazz: ACL.self, source: sourceDictionary["ACL"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["size"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.expires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expires"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                return instance
            }
			

			// Decoder for [CloudObject]
            Decoders.addDecoder(clazz: [CloudObject].self) { (source: AnyObject) -> [CloudObject] in
                return Decoders.decode(clazz: [CloudObject].self, source: source)
            }
			// Decoder for CloudObject
            Decoders.addDecoder(clazz: CloudObject.self) { (source: AnyObject) -> CloudObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudObject()
                return instance
            }
			

			// Decoder for [CloudObjectSaveRequest]
            Decoders.addDecoder(clazz: [CloudObjectSaveRequest].self) { (source: AnyObject) -> [CloudObjectSaveRequest] in
                return Decoders.decode(clazz: [CloudObjectSaveRequest].self, source: source)
            }
			// Decoder for CloudObjectSaveRequest
            Decoders.addDecoder(clazz: CloudObjectSaveRequest.self) { (source: AnyObject) -> CloudObjectSaveRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudObjectSaveRequest()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.document = Decoders.decodeOptional(clazz: CloudObject.self, source: sourceDictionary["document"])
                return instance
            }
			

			// Decoder for [CloudQuery]
            Decoders.addDecoder(clazz: [CloudQuery].self) { (source: AnyObject) -> [CloudQuery] in
                return Decoders.decode(clazz: [CloudQuery].self, source: source)
            }
			// Decoder for CloudQuery
            Decoders.addDecoder(clazz: CloudQuery.self) { (source: AnyObject) -> CloudQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQuery()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.query = Decoders.decodeOptional(clazz: Query.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sort"])
                instance.select = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["select"])
                return instance
            }
			

			// Decoder for [CloudQueryCount]
            Decoders.addDecoder(clazz: [CloudQueryCount].self) { (source: AnyObject) -> [CloudQueryCount] in
                return Decoders.decode(clazz: [CloudQueryCount].self, source: source)
            }
			// Decoder for CloudQueryCount
            Decoders.addDecoder(clazz: CloudQueryCount.self) { (source: AnyObject) -> CloudQueryCount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQueryCount()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.query = Decoders.decodeOptional(clazz: Query.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sort"])
                instance.select = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["select"])
                return instance
            }
			

			// Decoder for [CloudQueryDistinct]
            Decoders.addDecoder(clazz: [CloudQueryDistinct].self) { (source: AnyObject) -> [CloudQueryDistinct] in
                return Decoders.decode(clazz: [CloudQueryDistinct].self, source: source)
            }
			// Decoder for CloudQueryDistinct
            Decoders.addDecoder(clazz: CloudQueryDistinct.self) { (source: AnyObject) -> CloudQueryDistinct in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQueryDistinct()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.query = Decoders.decodeOptional(clazz: Query.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sort"])
                instance.select = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["select"])
                instance.onKey = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["onKey"])
                return instance
            }
			

			// Decoder for [CloudQueryFindById]
            Decoders.addDecoder(clazz: [CloudQueryFindById].self) { (source: AnyObject) -> [CloudQueryFindById] in
                return Decoders.decode(clazz: [CloudQueryFindById].self, source: source)
            }
			// Decoder for CloudQueryFindById
            Decoders.addDecoder(clazz: CloudQueryFindById.self) { (source: AnyObject) -> CloudQueryFindById in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQueryFindById()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.query = Decoders.decodeOptional(clazz: CloudQueryId.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sort"])
                instance.select = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["select"])
                return instance
            }
			

			// Decoder for [CloudQueryFindOne]
            Decoders.addDecoder(clazz: [CloudQueryFindOne].self) { (source: AnyObject) -> [CloudQueryFindOne] in
                return Decoders.decode(clazz: [CloudQueryFindOne].self, source: source)
            }
			// Decoder for CloudQueryFindOne
            Decoders.addDecoder(clazz: CloudQueryFindOne.self) { (source: AnyObject) -> CloudQueryFindOne in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQueryFindOne()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                instance.query = Decoders.decodeOptional(clazz: Query.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sort"])
                instance.select = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["select"])
                return instance
            }
			

			// Decoder for [CloudQueryId]
            Decoders.addDecoder(clazz: [CloudQueryId].self) { (source: AnyObject) -> [CloudQueryId] in
                return Decoders.decode(clazz: [CloudQueryId].self, source: source)
            }
			// Decoder for CloudQueryId
            Decoders.addDecoder(clazz: CloudQueryId.self) { (source: AnyObject) -> CloudQueryId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudQueryId()
                instance.includeList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["$includeList"])
                instance.include = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["$include"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                return instance
            }
			

			// Decoder for [CloudRole]
            Decoders.addDecoder(clazz: [CloudRole].self) { (source: AnyObject) -> [CloudRole] in
                return Decoders.decode(clazz: [CloudRole].self, source: source)
            }
			// Decoder for CloudRole
            Decoders.addDecoder(clazz: CloudRole.self) { (source: AnyObject) -> CloudRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudRole()
                return instance
            }
			

			// Decoder for [CloudSearch]
            Decoders.addDecoder(clazz: [CloudSearch].self) { (source: AnyObject) -> [CloudSearch] in
                return Decoders.decode(clazz: [CloudSearch].self, source: source)
            }
			// Decoder for CloudSearch
            Decoders.addDecoder(clazz: CloudSearch.self) { (source: AnyObject) -> CloudSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudSearch()
                instance.query = Decoders.decodeOptional(clazz: FilterBody.self, source: sourceDictionary["query"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.collectionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collectionName"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.skip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skip"])
                instance.limit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limit"])
                return instance
            }
			

			// Decoder for [CloudTable]
            Decoders.addDecoder(clazz: [CloudTable].self) { (source: AnyObject) -> [CloudTable] in
                return Decoders.decode(clazz: [CloudTable].self, source: source)
            }
			// Decoder for CloudTable
            Decoders.addDecoder(clazz: CloudTable.self) { (source: AnyObject) -> CloudTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudTable()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.appId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appId"])
                instance._type = CloudTable._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                return instance
            }
			

			// Decoder for [CloudTableSave]
            Decoders.addDecoder(clazz: [CloudTableSave].self) { (source: AnyObject) -> [CloudTableSave] in
                return Decoders.decode(clazz: [CloudTableSave].self, source: source)
            }
			// Decoder for CloudTableSave
            Decoders.addDecoder(clazz: CloudTableSave.self) { (source: AnyObject) -> CloudTableSave in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudTableSave()
                instance.data = Decoders.decodeOptional(clazz: CloudTable.self, source: sourceDictionary["data"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [CloudUser]
            Decoders.addDecoder(clazz: [CloudUser].self) { (source: AnyObject) -> [CloudUser] in
                return Decoders.decode(clazz: [CloudUser].self, source: source)
            }
			// Decoder for CloudUser
            Decoders.addDecoder(clazz: CloudUser.self) { (source: AnyObject) -> CloudUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CloudUser()
                return instance
            }
			

			// Decoder for [Deny]
            Decoders.addDecoder(clazz: [Deny].self) { (source: AnyObject) -> [Deny] in
                return Decoders.decode(clazz: [Deny].self, source: source)
            }
			// Decoder for Deny
            Decoders.addDecoder(clazz: Deny.self) { (source: AnyObject) -> Deny in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Deny()
                instance.user = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user"])
                instance.role = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role"])
                return instance
            }
			

			// Decoder for [EmailBody]
            Decoders.addDecoder(clazz: [EmailBody].self) { (source: AnyObject) -> [EmailBody] in
                return Decoders.decode(clazz: [EmailBody].self, source: source)
            }
			// Decoder for EmailBody
            Decoders.addDecoder(clazz: EmailBody.self) { (source: AnyObject) -> EmailBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailBody()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [FileBody]
            Decoders.addDecoder(clazz: [FileBody].self) { (source: AnyObject) -> [FileBody] in
                return Decoders.decode(clazz: [FileBody].self, source: source)
            }
			// Decoder for FileBody
            Decoders.addDecoder(clazz: FileBody.self) { (source: AnyObject) -> FileBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FileBody()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"])
                instance.fileObj = Decoders.decodeOptional(clazz: CloudFile.self, source: sourceDictionary["fileObj"])
                return instance
            }
			

			// Decoder for [FilterBody]
            Decoders.addDecoder(clazz: [FilterBody].self) { (source: AnyObject) -> [FilterBody] in
                return Decoders.decode(clazz: [FilterBody].self, source: source)
            }
			// Decoder for FilterBody
            Decoders.addDecoder(clazz: FilterBody.self) { (source: AnyObject) -> FilterBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterBody()
                instance.filtered = Decoders.decodeOptional(clazz: Filtered.self, source: sourceDictionary["filtered"])
                return instance
            }
			

			// Decoder for [Filtered]
            Decoders.addDecoder(clazz: [Filtered].self) { (source: AnyObject) -> [Filtered] in
                return Decoders.decode(clazz: [Filtered].self, source: source)
            }
			// Decoder for Filtered
            Decoders.addDecoder(clazz: Filtered.self) { (source: AnyObject) -> Filtered in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Filtered()
                instance.query = Decoders.decodeOptional(clazz: BoolQuery.self, source: sourceDictionary["query"])
                instance.filter = Decoders.decodeOptional(clazz: BoolFilter.self, source: sourceDictionary["filter"])
                return instance
            }
			

			// Decoder for [KeyBody]
            Decoders.addDecoder(clazz: [KeyBody].self) { (source: AnyObject) -> [KeyBody] in
                return Decoders.decode(clazz: [KeyBody].self, source: source)
            }
			// Decoder for KeyBody
            Decoders.addDecoder(clazz: KeyBody.self) { (source: AnyObject) -> KeyBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = KeyBody()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [ModelColumn]
            Decoders.addDecoder(clazz: [ModelColumn].self) { (source: AnyObject) -> [ModelColumn] in
                return Decoders.decode(clazz: [ModelColumn].self, source: source)
            }
			// Decoder for ModelColumn
            Decoders.addDecoder(clazz: ModelColumn.self) { (source: AnyObject) -> ModelColumn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModelColumn()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dataType = ModelColumn.DataType(rawValue: (sourceDictionary["dataType"] as? String) ?? "") 
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"])
                instance.unique = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["unique"])
                instance.relatedTo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relatedTo"])
                instance.relationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationType"])
                instance.isDeletable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDeletable"])
                instance.isEditable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isEditable"])
                instance.isRenamable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isRenamable"])
                return instance
            }
			

			// Decoder for [ModifiedQueue]
            Decoders.addDecoder(clazz: [ModifiedQueue].self) { (source: AnyObject) -> [ModifiedQueue] in
                return Decoders.decode(clazz: [ModifiedQueue].self, source: source)
            }
			// Decoder for ModifiedQueue
            Decoders.addDecoder(clazz: ModifiedQueue.self) { (source: AnyObject) -> ModifiedQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModifiedQueue()
                instance.ACL = Decoders.decodeOptional(clazz: ACL.self, source: sourceDictionary["ACL"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.expires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expires"])
                instance.queueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueType"])
                instance.retry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["retry"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.subscribers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subscribers"])
                instance.isModified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["_isModified"])
                instance.modifiedColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["_modifiedColumns"])
                instance.messages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["messages"])
                return instance
            }
			

			// Decoder for [ModifiedQueueBody]
            Decoders.addDecoder(clazz: [ModifiedQueueBody].self) { (source: AnyObject) -> [ModifiedQueueBody] in
                return Decoders.decode(clazz: [ModifiedQueueBody].self, source: source)
            }
			// Decoder for ModifiedQueueBody
            Decoders.addDecoder(clazz: ModifiedQueueBody.self) { (source: AnyObject) -> ModifiedQueueBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModifiedQueueBody()
                instance.document = Decoders.decodeOptional(clazz: ModifiedQueue.self, source: sourceDictionary["document"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [PasswordChangeBody]
            Decoders.addDecoder(clazz: [PasswordChangeBody].self) { (source: AnyObject) -> [PasswordChangeBody] in
                return Decoders.decode(clazz: [PasswordChangeBody].self, source: source)
            }
			// Decoder for PasswordChangeBody
            Decoders.addDecoder(clazz: PasswordChangeBody.self) { (source: AnyObject) -> PasswordChangeBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PasswordChangeBody()
                instance.oldPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["oldPassword"])
                instance.newPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newPassword"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [Query]
            Decoders.addDecoder(clazz: [Query].self) { (source: AnyObject) -> [Query] in
                return Decoders.decode(clazz: [Query].self, source: source)
            }
			// Decoder for Query
            Decoders.addDecoder(clazz: Query.self) { (source: AnyObject) -> Query in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Query()
                instance.includeList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["$includeList"])
                instance.include = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["$include"])
                return instance
            }
			

			// Decoder for [Queue]
            Decoders.addDecoder(clazz: [Queue].self) { (source: AnyObject) -> [Queue] in
                return Decoders.decode(clazz: [Queue].self, source: source)
            }
			// Decoder for Queue
            Decoders.addDecoder(clazz: Queue.self) { (source: AnyObject) -> Queue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Queue()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_tableName"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                instance.ACL = Decoders.decodeOptional(clazz: ACL.self, source: sourceDictionary["ACL"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.expires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expires"])
                instance.queueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueType"])
                instance.retry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["retry"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.subscribers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subscribers"])
                instance.messages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["messages"])
                return instance
            }
			

			// Decoder for [QueueBody]
            Decoders.addDecoder(clazz: [QueueBody].self) { (source: AnyObject) -> [QueueBody] in
                return Decoders.decode(clazz: [QueueBody].self, source: source)
            }
			// Decoder for QueueBody
            Decoders.addDecoder(clazz: QueueBody.self) { (source: AnyObject) -> QueueBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueBody()
                instance.document = Decoders.decodeOptional(clazz: Queue.self, source: sourceDictionary["document"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [QueueMessage]
            Decoders.addDecoder(clazz: [QueueMessage].self) { (source: AnyObject) -> [QueueMessage] in
                return Decoders.decode(clazz: [QueueMessage].self, source: source)
            }
			// Decoder for QueueMessage
            Decoders.addDecoder(clazz: QueueMessage.self) { (source: AnyObject) -> QueueMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueMessage()
                instance.ACL = Decoders.decodeOptional(clazz: ACL.self, source: sourceDictionary["ACL"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.expires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expires"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.delay = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["delay"])
                instance.timeout = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timeout"])
                instance.modifiedColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["_modifiedColumns"])
                instance.isModified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["_isModified"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }
			

			// Decoder for [QueuePayloadWithCount]
            Decoders.addDecoder(clazz: [QueuePayloadWithCount].self) { (source: AnyObject) -> [QueuePayloadWithCount] in
                return Decoders.decode(clazz: [QueuePayloadWithCount].self, source: source)
            }
			// Decoder for QueuePayloadWithCount
            Decoders.addDecoder(clazz: QueuePayloadWithCount.self) { (source: AnyObject) -> QueuePayloadWithCount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueuePayloadWithCount()
                instance.count = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["count"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [Read]
            Decoders.addDecoder(clazz: [Read].self) { (source: AnyObject) -> [Read] in
                return Decoders.decode(clazz: [Read].self, source: source)
            }
			// Decoder for Read
            Decoders.addDecoder(clazz: Read.self) { (source: AnyObject) -> Read in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Read()
                instance.allow = Decoders.decodeOptional(clazz: Allow.self, source: sourceDictionary["allow"])
                instance.deny = Decoders.decodeOptional(clazz: Deny.self, source: sourceDictionary["deny"])
                return instance
            }
			

			// Decoder for [RefreshMessageTimeoutBody]
            Decoders.addDecoder(clazz: [RefreshMessageTimeoutBody].self) { (source: AnyObject) -> [RefreshMessageTimeoutBody] in
                return Decoders.decode(clazz: [RefreshMessageTimeoutBody].self, source: source)
            }
			// Decoder for RefreshMessageTimeoutBody
            Decoders.addDecoder(clazz: RefreshMessageTimeoutBody.self) { (source: AnyObject) -> RefreshMessageTimeoutBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RefreshMessageTimeoutBody()
                instance.timeout = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timeout"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }
			

			// Decoder for [RoleBody]
            Decoders.addDecoder(clazz: [RoleBody].self) { (source: AnyObject) -> [RoleBody] in
                return Decoders.decode(clazz: [RoleBody].self, source: source)
            }
			// Decoder for RoleBody
            Decoders.addDecoder(clazz: RoleBody.self) { (source: AnyObject) -> RoleBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RoleBody()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.document = Decoders.decodeOptional(clazz: CloudRole.self, source: sourceDictionary["document"])
                return instance
            }
			

			// Decoder for [SearchFilter]
            Decoders.addDecoder(clazz: [SearchFilter].self) { (source: AnyObject) -> [SearchFilter] in
                return Decoders.decode(clazz: [SearchFilter].self, source: source)
            }
			// Decoder for SearchFilter
            Decoders.addDecoder(clazz: SearchFilter.self) { (source: AnyObject) -> SearchFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SearchFilter()
                instance.mustNot = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["must_not"])
                instance.should = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["should"])
                instance.must = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["must"])
                return instance
            }
			

			// Decoder for [SearchQuery]
            Decoders.addDecoder(clazz: [SearchQuery].self) { (source: AnyObject) -> [SearchQuery] in
                return Decoders.decode(clazz: [SearchQuery].self, source: source)
            }
			// Decoder for SearchQuery
            Decoders.addDecoder(clazz: SearchQuery.self) { (source: AnyObject) -> SearchQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SearchQuery()
                instance.mustNot = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["must_not"])
                instance.should = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["should"])
                instance.must = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["must"])
                return instance
            }
			

			// Decoder for [UserBody]
            Decoders.addDecoder(clazz: [UserBody].self) { (source: AnyObject) -> [UserBody] in
                return Decoders.decode(clazz: [UserBody].self, source: source)
            }
			// Decoder for UserBody
            Decoders.addDecoder(clazz: UserBody.self) { (source: AnyObject) -> UserBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserBody()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.document = Decoders.decodeOptional(clazz: CloudUser.self, source: sourceDictionary["document"])
                return instance
            }
			

			// Decoder for [UserRoleBody]
            Decoders.addDecoder(clazz: [UserRoleBody].self) { (source: AnyObject) -> [UserRoleBody] in
                return Decoders.decode(clazz: [UserRoleBody].self, source: source)
            }
			// Decoder for UserRoleBody
            Decoders.addDecoder(clazz: UserRoleBody.self) { (source: AnyObject) -> UserRoleBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserRoleBody()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.role = Decoders.decodeOptional(clazz: CloudRole.self, source: sourceDictionary["role"])
                instance.user = Decoders.decodeOptional(clazz: CloudUser.self, source: sourceDictionary["user"])
                return instance
            }
			

			// Decoder for [Write]
            Decoders.addDecoder(clazz: [Write].self) { (source: AnyObject) -> [Write] in
                return Decoders.decode(clazz: [Write].self, source: source)
            }
			// Decoder for Write
            Decoders.addDecoder(clazz: Write.self) { (source: AnyObject) -> Write in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Write()
                instance.allow = Decoders.decodeOptional(clazz: Allow.self, source: sourceDictionary["allow"])
                instance.deny = Decoders.decodeOptional(clazz: Deny.self, source: sourceDictionary["deny"])
                return instance
            }
			
        }
    }
}
