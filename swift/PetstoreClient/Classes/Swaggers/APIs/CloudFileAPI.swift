//
// CloudFileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudFileAPI: APIBase {
    /**
     
     deletes file
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFile(appId appId: String, fileId: String, body: KeyBody?, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteFileWithRequestBuilder(appId: appId, fileId: fileId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     deletes file
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)
     - returns: Promise<String>
     */
    public class func deleteFile(appId appId: String, fileId: String, body: KeyBody?) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        deleteFile(appId: appId, fileId: fileId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     deletes file
     
     - DELETE file/{appId}/{fileId}
     - 
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)

     - returns: RequestBuilder<String> 
     */
    public class func deleteFileWithRequestBuilder(appId appId: String, fileId: String, body: KeyBody?) -> RequestBuilder<String> {
        var path = "file/{appId}/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     fetch file content
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func fetchFileContent(appId appId: String, fileId: String, body: KeyBody?, completion: ((data: String?, error: ErrorType?) -> Void)) {
        fetchFileContentWithRequestBuilder(appId: appId, fileId: fileId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     fetch file content
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)
     - returns: Promise<String>
     */
    public class func fetchFileContent(appId appId: String, fileId: String, body: KeyBody?) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        fetchFileContent(appId: appId, fileId: fileId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     fetch file content
     
     - POST file/{appId}/{fileId}
     - 
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) ID of app 
     - parameter fileId: (path) file id 
     - parameter body: (body) request body (optional)

     - returns: RequestBuilder<String> 
     */
    public class func fetchFileContentWithRequestBuilder(appId appId: String, fileId: String, body: KeyBody?) -> RequestBuilder<String> {
        var path = "file/{appId}/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     uploads a file
     
     - parameter appId: (path) ID of app 
     - parameter fileObj: (form) file extra data 
     - parameter key: (form) app key (optional)
     - parameter fileToUpload: (form) file to upload (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func saveFile(appId appId: String, fileObj: String, key: String?, fileToUpload: NSURL?, completion: ((data: String?, error: ErrorType?) -> Void)) {
        saveFileWithRequestBuilder(appId: appId, fileObj: fileObj, key: key, fileToUpload: fileToUpload).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     uploads a file
     
     - parameter appId: (path) ID of app 
     - parameter fileObj: (form) file extra data 
     - parameter key: (form) app key (optional)
     - parameter fileToUpload: (form) file to upload (optional)
     - returns: Promise<String>
     */
    public class func saveFile(appId appId: String, fileObj: String, key: String?, fileToUpload: NSURL?) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        saveFile(appId: appId, fileObj: fileObj, key: key, fileToUpload: fileToUpload) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     uploads a file
     
     - POST file/{appId}
     - 
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) ID of app 
     - parameter fileObj: (form) file extra data 
     - parameter key: (form) app key (optional)
     - parameter fileToUpload: (form) file to upload (optional)

     - returns: RequestBuilder<String> 
     */
    public class func saveFileWithRequestBuilder(appId appId: String, fileObj: String, key: String?, fileToUpload: NSURL?) -> RequestBuilder<String> {
        var path = "file/{appId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "key": key,
            "fileObj": fileObj,
            "fileToUpload": fileToUpload
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     uploads a file with data
     
     - parameter myAppId: (path) ID of app 
     - parameter fileObj: (body) file extra data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func saveFileData(myAppId myAppId: String, fileObj: FileBody, completion: ((data: String?, error: ErrorType?) -> Void)) {
        saveFileDataWithRequestBuilder(myAppId: myAppId, fileObj: fileObj).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     uploads a file with data
     
     - parameter myAppId: (path) ID of app 
     - parameter fileObj: (body) file extra data 
     - returns: Promise<String>
     */
    public class func saveFileData(myAppId myAppId: String, fileObj: FileBody) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        saveFileData(myAppId: myAppId, fileObj: fileObj) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     uploads a file with data
     
     - POST file/{myAppId}
     - 
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter myAppId: (path) ID of app 
     - parameter fileObj: (body) file extra data 

     - returns: RequestBuilder<String> 
     */
    public class func saveFileDataWithRequestBuilder(myAppId myAppId: String, fileObj: FileBody) -> RequestBuilder<String> {
        var path = "file/{myAppId}"
        path = path.stringByReplacingOccurrencesOfString("{myAppId}", withString: "\(myAppId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = fileObj.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
