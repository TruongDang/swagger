//
// CloudUserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudUserAPI: APIBase {
    /**
     
     add a user to a role
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addToRole(appId appId: String, body: UserRoleBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        addToRoleWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     add a user to a role
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func addToRole(appId appId: String, body: UserRoleBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        addToRole(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     add a user to a role
     
     - PUT user/{appId}/addToRole
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func addToRoleWithRequestBuilder(appId appId: String, body: UserRoleBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/addToRole"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     change a password
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func changePassword(appId appId: String, body: PasswordChangeBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        changePasswordWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     change a password
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func changePassword(appId appId: String, body: PasswordChangeBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        changePassword(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     change a password
     
     - PUT user/{appId}/changePassword
     - changes the password for a logged in user without logging them out
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func changePasswordWithRequestBuilder(appId appId: String, body: PasswordChangeBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/changePassword"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     login existing user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func login(appId appId: String, body: UserBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        loginWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     login existing user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func login(appId appId: String, body: UserBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        login(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     login existing user
     
     - POST user/{appId}/login
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func loginWithRequestBuilder(appId appId: String, body: UserBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/login"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     logout user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func logout(appId appId: String, body: UserBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        logoutWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     logout user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func logout(appId appId: String, body: UserBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        logout(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     logout user
     
     - POST user/{appId}/logout
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func logoutWithRequestBuilder(appId appId: String, body: UserBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/logout"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     remove a user from a role
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeFromRole(appId appId: String, body: UserRoleBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        removeFromRoleWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     remove a user from a role
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func removeFromRole(appId appId: String, body: UserRoleBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        removeFromRole(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     remove a user from a role
     
     - PUT user/{appId}/removeFromRole
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func removeFromRoleWithRequestBuilder(appId appId: String, body: UserRoleBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/removeFromRole"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     reset a password
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func resetPassword(appId appId: String, body: EmailBody, completion: ((data: String?, error: ErrorType?) -> Void)) {
        resetPasswordWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     reset a password
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<String>
     */
    public class func resetPassword(appId appId: String, body: EmailBody) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        resetPassword(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     reset a password
     
     - POST user/{appId}/resetPassword
     - sends a password reset link to the given email
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<String> 
     */
    public class func resetPasswordWithRequestBuilder(appId appId: String, body: EmailBody) -> RequestBuilder<String> {
        var path = "user/{appId}/resetPassword"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     create a new user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func signUp(appId appId: String, body: UserBody, completion: ((data: CloudUser?, error: ErrorType?) -> Void)) {
        signUpWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     create a new user
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 
     - returns: Promise<CloudUser>
     */
    public class func signUp(appId appId: String, body: UserBody) -> Promise<CloudUser> {
        let deferred = Promise<CloudUser>.pendingPromise()
        signUp(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     create a new user
     
     - POST user/{appId}/signup
     - 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) ID of app 
     - parameter body: (body) request body 

     - returns: RequestBuilder<CloudUser> 
     */
    public class func signUpWithRequestBuilder(appId appId: String, body: UserBody) -> RequestBuilder<CloudUser> {
        var path = "user/{appId}/signup"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudUser>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
