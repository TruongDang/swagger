//
// CloudQueueAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudQueueAPI: APIBase {
    /**
     
     push message to queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addMessage(appId appId: String, queueName: String, body: QueueBody, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        addMessageWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     push message to queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func addMessage(appId appId: String, queueName: String, body: QueueBody) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        addMessage(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     push message to queue
     
     - PUT queue/{appId}/{queueName}/message
     - add message message to queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func addMessageWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/message"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     add a subscriber to this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubscriber(appId appId: String, queueName: String, body: QueueBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        addSubscriberWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     add a subscriber to this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 
     - returns: Promise<Queue>
     */
    public class func addSubscriber(appId appId: String, queueName: String, body: QueueBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        addSubscriber(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     add a subscriber to this queue
     
     - POST queue/{appId}/{queueName}/subscriber
     - add a subscriber to this queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 

     - returns: RequestBuilder<Queue> 
     */
    public class func addSubscriberWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}/subscriber"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     clear queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func clear(appId appId: String, queueName: String, body: QueueBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        clearWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     clear queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<Queue>
     */
    public class func clear(appId appId: String, queueName: String, body: QueueBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        clear(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     clear queue
     
     - DELETE queue/{appId}/{queueName}/clear
     - clear queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<Queue> 
     */
    public class func clearWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}/clear"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     create a new queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createQueue(appId appId: String, queueName: String, body: QueueBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        createQueueWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     create a new queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<Queue>
     */
    public class func createQueue(appId appId: String, queueName: String, body: QueueBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        createQueue(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     create a new queue
     
     - POST queue/{appId}/{queueName}/create
     - add message message to queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<Queue> 
     */
    public class func createQueueWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}/create"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete a message in this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteMessage(appId appId: String, queueName: String, messageId: String, body: KeyBody, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        deleteMessageWithRequestBuilder(appId: appId, queueName: queueName, messageId: messageId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete a message in this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func deleteMessage(appId appId: String, queueName: String, messageId: String, body: KeyBody) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        deleteMessage(appId: appId, queueName: queueName, messageId: messageId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete a message in this queue
     
     - DELETE queue/{appId}/{queueName}/message/{messageId}
     - delete a message in this queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func deleteMessageWithRequestBuilder(appId appId: String, queueName: String, messageId: String, body: KeyBody) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/message/{messageId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{messageId}", withString: "\(messageId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete a queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQueue(appId appId: String, queueName: String, body: QueueBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        deleteQueueWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete a queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<Queue>
     */
    public class func deleteQueue(appId appId: String, queueName: String, body: QueueBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        deleteQueue(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete a queue
     
     - DELETE queue/{appId}/{queueName}
     - delete queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<Queue> 
     */
    public class func deleteQueueWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete a subscriber to this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscriber(appId appId: String, queueName: String, body: QueueBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        deleteSubscriberWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete a subscriber to this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 
     - returns: Promise<Queue>
     */
    public class func deleteSubscriber(appId appId: String, queueName: String, body: QueueBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        deleteSubscriber(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete a subscriber to this queue
     
     - DELETE queue/{appId}/{queueName}/subscriber
     - delete a subscriber to this queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) payload 

     - returns: RequestBuilder<Queue> 
     */
    public class func deleteSubscriberWithRequestBuilder(appId appId: String, queueName: String, body: QueueBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}/subscriber"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     push message to queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllMessages(appId appId: String, body: KeyBody, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        getAllMessagesWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     push message to queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func getAllMessages(appId appId: String, body: KeyBody) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        getAllMessages(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     push message to queue
     
     - POST queue/{appId}/messages
     - add message message to queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func getAllMessagesWithRequestBuilder(appId appId: String, body: KeyBody) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/messages"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get all queues
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllQueues(appId appId: String, body: KeyBody, completion: ((data: [Queue]?, error: ErrorType?) -> Void)) {
        getAllQueuesWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get all queues
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 
     - returns: Promise<[Queue]>
     */
    public class func getAllQueues(appId appId: String, body: KeyBody) -> Promise<[Queue]> {
        let deferred = Promise<[Queue]>.pendingPromise()
        getAllQueues(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get all queues
     
     - POST queue/{appId}
     - get all queues
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[Queue]> 
     */
    public class func getAllQueuesWithRequestBuilder(appId appId: String, body: KeyBody) -> RequestBuilder<[Queue]> {
        var path = "queue/{appId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[Queue]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get messages in queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMessage(appId appId: String, queueName: String, body: QueuePayloadWithCount, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        getMessageWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get messages in queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func getMessage(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        getMessage(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get messages in queue
     
     - POST queue/{appId}/{queueName}/getMessage
     - get messages in queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func getMessageWithRequestBuilder(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/getMessage"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get a message in this queue by its id
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMessageById(appId appId: String, queueName: String, messageId: String, body: KeyBody, completion: ((data: QueueMessage?, error: ErrorType?) -> Void)) {
        getMessageByIdWithRequestBuilder(appId: appId, queueName: queueName, messageId: messageId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get a message in this queue by its id
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - returns: Promise<QueueMessage>
     */
    public class func getMessageById(appId appId: String, queueName: String, messageId: String, body: KeyBody) -> Promise<QueueMessage> {
        let deferred = Promise<QueueMessage>.pendingPromise()
        getMessageById(appId: appId, queueName: queueName, messageId: messageId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get a message in this queue by its id
     
     - POST queue/{appId}/{queueName}/message/{messageId}
     - get a message in this queue by its id
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<QueueMessage> 
     */
    public class func getMessageByIdWithRequestBuilder(appId appId: String, queueName: String, messageId: String, body: KeyBody) -> RequestBuilder<QueueMessage> {
        var path = "queue/{appId}/{queueName}/message/{messageId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{messageId}", withString: "\(messageId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<QueueMessage>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQueue(appId appId: String, queueName: String, body: KeyBody, completion: ((data: Queue?, error: ErrorType?) -> Void)) {
        getQueueWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<Queue>
     */
    public class func getQueue(appId appId: String, queueName: String, body: KeyBody) -> Promise<Queue> {
        let deferred = Promise<Queue>.pendingPromise()
        getQueue(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get queue
     
     - POST queue/{appId}/{queueName}
     - get queue
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+0000",
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "_tableName" : "aeiou",
  "retry" : "aeiou",
  "updatedAt" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<Queue> 
     */
    public class func getQueueWithRequestBuilder(appId appId: String, queueName: String, body: KeyBody) -> RequestBuilder<Queue> {
        var path = "queue/{appId}/{queueName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Queue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     peek messages in queue without removing them
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func peek(appId appId: String, queueName: String, body: QueuePayloadWithCount, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        peekWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     peek messages in queue without removing them
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func peek(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        peek(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     peek messages in queue without removing them
     
     - POST queue/{appId}/{queueName}/peek
     - peek messages in queue without removing them
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func peekWithRequestBuilder(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/peek"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     peek messages in queue without removing them
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func peekMessage(appId appId: String, queueName: String, body: QueuePayloadWithCount, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        peekMessageWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     peek messages in queue without removing them
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func peekMessage(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        peekMessage(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     peek messages in queue without removing them
     
     - POST queue/{appId}/{queueName}/peekMessage
     - peek messages in queue without removing them
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func peekMessageWithRequestBuilder(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/peekMessage"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     pull messages from queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func pull(appId appId: String, queueName: String, body: QueuePayloadWithCount, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        pullWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     pull messages from queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func pull(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        pull(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     pull messages from queue
     
     - POST queue/{appId}/{queueName}/pull
     - pull messages from queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func pullWithRequestBuilder(appId appId: String, queueName: String, body: QueuePayloadWithCount) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/pull"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     refresh timeout of a message in this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func refreshMessageTimeout(appId appId: String, queueName: String, messageId: String, body: RefreshMessageTimeoutBody, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        refreshMessageTimeoutWithRequestBuilder(appId: appId, queueName: queueName, messageId: messageId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     refresh timeout of a message in this queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func refreshMessageTimeout(appId appId: String, queueName: String, messageId: String, body: RefreshMessageTimeoutBody) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        refreshMessageTimeout(appId: appId, queueName: queueName, messageId: messageId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     refresh timeout of a message in this queue
     
     - PUT queue/{appId}/{queueName}/{messageId}/refresh-message-timeout
     - refresh timeout of a message in this queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter messageId: (path) message id 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func refreshMessageTimeoutWithRequestBuilder(appId appId: String, queueName: String, messageId: String, body: RefreshMessageTimeoutBody) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{appId}/{queueName}/{messageId}/refresh-message-timeout"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{messageId}", withString: "\(messageId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     push message to queue
     
     - parameter myAppId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateMessage(myAppId myAppId: String, queueName: String, body: QueueBody, completion: ((data: [QueueMessage]?, error: ErrorType?) -> Void)) {
        updateMessageWithRequestBuilder(myAppId: myAppId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     push message to queue
     
     - parameter myAppId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<[QueueMessage]>
     */
    public class func updateMessage(myAppId myAppId: String, queueName: String, body: QueueBody) -> Promise<[QueueMessage]> {
        let deferred = Promise<[QueueMessage]>.pendingPromise()
        updateMessage(myAppId: myAppId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     push message to queue
     
     - PUT queue/{myAppId}/{queueName}/message
     - add message message to queue
     - examples: [{contentType=application/json, example=[ {
  "expires" : "2000-01-23T04:56:07.000+0000",
  "delay" : "2000-01-23T04:56:07.000+0000",
  "_isModified" : true,
  "_type" : "aeiou",
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "_id" : "aeiou",
  "message" : "aeiou",
  "timeout" : 123456789,
  "_modifiedColumns" : [ "aeiou" ]
} ]}]
     
     - parameter myAppId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<[QueueMessage]> 
     */
    public class func updateMessageWithRequestBuilder(myAppId myAppId: String, queueName: String, body: QueueBody) -> RequestBuilder<[QueueMessage]> {
        var path = "queue/{myAppId}/{queueName}/message"
        path = path.stringByReplacingOccurrencesOfString("{myAppId}", withString: "\(myAppId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[QueueMessage]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     update queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateQueue(appId appId: String, queueName: String, body: ModifiedQueueBody, completion: ((data: ModifiedQueue?, error: ErrorType?) -> Void)) {
        updateQueueWithRequestBuilder(appId: appId, queueName: queueName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     update queue
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 
     - returns: Promise<ModifiedQueue>
     */
    public class func updateQueue(appId appId: String, queueName: String, body: ModifiedQueueBody) -> Promise<ModifiedQueue> {
        let deferred = Promise<ModifiedQueue>.pendingPromise()
        updateQueue(appId: appId, queueName: queueName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     update queue
     
     - PUT queue/{appId}/{queueName}
     - update queue
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+0000",
  "subscribers" : [ "aeiou" ],
  "_isModified" : true,
  "_type" : "aeiou",
  "name" : "aeiou",
  "queueType" : "aeiou",
  "messages" : [ {
    "expires" : "2000-01-23T04:56:07.000+0000",
    "delay" : "2000-01-23T04:56:07.000+0000",
    "_isModified" : true,
    "_type" : "aeiou",
    "ACL" : "",
    "_id" : "aeiou",
    "message" : "aeiou",
    "timeout" : 123456789,
    "_modifiedColumns" : [ "aeiou" ]
  } ],
  "ACL" : {
    "read" : {
      "allow" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      },
      "deny" : {
        "role" : [ "aeiou" ],
        "user" : [ "aeiou" ]
      }
    },
    "write" : {
      "allow" : "",
      "deny" : ""
    }
  },
  "retry" : "aeiou",
  "_modifiedColumns" : [ "aeiou" ]
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter queueName: (path) Name of queue 
     - parameter body: (body) client key of app 

     - returns: RequestBuilder<ModifiedQueue> 
     */
    public class func updateQueueWithRequestBuilder(appId appId: String, queueName: String, body: ModifiedQueueBody) -> RequestBuilder<ModifiedQueue> {
        var path = "queue/{appId}/{queueName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{queueName}", withString: "\(queueName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ModifiedQueue>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
