//
// CloudTableAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudTableAPI: APIBase {
    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) id of app 
     - parameter body: (body) master key and app id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func callGet(tableName tableName: String, appId: String, body: KeyBody, completion: ((data: CloudTable?, error: ErrorType?) -> Void)) {
        callGetWithRequestBuilder(tableName: tableName, appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) id of app 
     - parameter body: (body) master key and app id 
     - returns: Promise<CloudTable>
     */
    public class func callGet(tableName tableName: String, appId: String, body: KeyBody) -> Promise<CloudTable> {
        let deferred = Promise<CloudTable>.pendingPromise()
        callGet(tableName: tableName, appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     - POST app/{appId}/{tableName}
     - get a table
     - examples: [{contentType=application/json, example={
  "columns" : [ {
    "relationType" : "aeiou",
    "isDeletable" : true,
    "isEditable" : true,
    "dataType" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "_type" : "aeiou",
    "isRenamable" : true,
    "required" : true,
    "relatedTo" : "aeiou"
  } ],
  "appId" : "aeiou",
  "name" : "aeiou",
  "type" : "aeiou"
}}]
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) id of app 
     - parameter body: (body) master key and app id 

     - returns: RequestBuilder<CloudTable> 
     */
    public class func callGetWithRequestBuilder(tableName tableName: String, appId: String, body: KeyBody) -> RequestBuilder<CloudTable> {
        var path = "app/{appId}/{tableName}"
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudTable>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTable(tableName tableName: String, appId: String, body: CloudTableSave, completion: ((data: CloudTable?, error: ErrorType?) -> Void)) {
        deleteTableWithRequestBuilder(tableName: tableName, appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 
     - returns: Promise<CloudTable>
     */
    public class func deleteTable(tableName tableName: String, appId: String, body: CloudTableSave) -> Promise<CloudTable> {
        let deferred = Promise<CloudTable>.pendingPromise()
        deleteTable(tableName: tableName, appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     - DELETE app/{appId}/{tableName}
     - delete a cloud table
     - examples: [{contentType=application/json, example={
  "columns" : [ {
    "relationType" : "aeiou",
    "isDeletable" : true,
    "isEditable" : true,
    "dataType" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "_type" : "aeiou",
    "isRenamable" : true,
    "required" : true,
    "relatedTo" : "aeiou"
  } ],
  "appId" : "aeiou",
  "name" : "aeiou",
  "type" : "aeiou"
}}]
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 

     - returns: RequestBuilder<CloudTable> 
     */
    public class func deleteTableWithRequestBuilder(tableName tableName: String, appId: String, body: CloudTableSave) -> RequestBuilder<CloudTable> {
        var path = "app/{appId}/{tableName}"
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudTable>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     - parameter appId: (path) app id 
     - parameter body: (body) master key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAll(appId appId: String, body: KeyBody, completion: ((error: ErrorType?) -> Void)) {
        getAllWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }

    /**
     
     - parameter appId: (path) app id 
     - parameter body: (body) master key 
     - returns: Promise<Void>
     */
    public class func getAll(appId appId: String, body: KeyBody) -> Promise<Void> {
        let deferred = Promise<Void>.pendingPromise()
        getAll(appId: appId, body: body) { error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill()
            }
        }
        return deferred.promise
    }

    /**
     
     - POST /app/{appId}/_getAll
     - get all tables in app
     
     - parameter appId: (path) app id 
     - parameter body: (body) master key 

     - returns: RequestBuilder<Void> 
     */
    public class func getAllWithRequestBuilder(appId appId: String, body: KeyBody) -> RequestBuilder<Void> {
        var path = "/app/{appId}/_getAll"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func save(tableName tableName: String, appId: String, body: CloudTableSave, completion: ((data: CloudTable?, error: ErrorType?) -> Void)) {
        saveWithRequestBuilder(tableName: tableName, appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 
     - returns: Promise<CloudTable>
     */
    public class func save(tableName tableName: String, appId: String, body: CloudTableSave) -> Promise<CloudTable> {
        let deferred = Promise<CloudTable>.pendingPromise()
        save(tableName: tableName, appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     - PUT app/{appId}/{tableName}
     - save a cloud table
     - examples: [{contentType=application/json, example={
  "columns" : [ {
    "relationType" : "aeiou",
    "isDeletable" : true,
    "isEditable" : true,
    "dataType" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "_type" : "aeiou",
    "isRenamable" : true,
    "required" : true,
    "relatedTo" : "aeiou"
  } ],
  "appId" : "aeiou",
  "name" : "aeiou",
  "type" : "aeiou"
}}]
     
     - parameter tableName: (path) name of cloud table 
     - parameter appId: (path) cloud app id 
     - parameter body: (body) master key and app id 

     - returns: RequestBuilder<CloudTable> 
     */
    public class func saveWithRequestBuilder(tableName tableName: String, appId: String, body: CloudTableSave) -> RequestBuilder<CloudTable> {
        var path = "app/{appId}/{tableName}"
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudTable>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
