//
// CloudObjectAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudObjectAPI: APIBase {
    /**
     
     deletes a cloud object from cloudapp
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to the cloudboost 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func delete(appId appId: String, tableName: String, body: CloudObjectSaveRequest, completion: ((data: CloudObject?, error: ErrorType?) -> Void)) {
        deleteWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     deletes a cloud object from cloudapp
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to the cloudboost 
     - returns: Promise<CloudObject>
     */
    public class func delete(appId appId: String, tableName: String, body: CloudObjectSaveRequest) -> Promise<CloudObject> {
        let deferred = Promise<CloudObject>.pendingPromise()
        delete(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     deletes a cloud object from cloudapp
     
     - DELETE data/{appId}/{tableName}
     - deletes a cloud object from cloudapp
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to the cloudboost 

     - returns: RequestBuilder<CloudObject> 
     */
    public class func deleteWithRequestBuilder(appId appId: String, tableName: String, body: CloudObjectSaveRequest) -> RequestBuilder<CloudObject> {
        var path = "data/{appId}/{tableName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudObject>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     saves a cloud object to cloudboost
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to cloudboost 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func save(appId appId: String, tableName: String, body: CloudObjectSaveRequest, completion: ((data: CloudObject?, error: ErrorType?) -> Void)) {
        saveWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     saves a cloud object to cloudboost
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to cloudboost 
     - returns: Promise<CloudObject>
     */
    public class func save(appId appId: String, tableName: String, body: CloudObjectSaveRequest) -> Promise<CloudObject> {
        let deferred = Promise<CloudObject>.pendingPromise()
        save(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     saves a cloud object to cloudboost
     
     - PUT data/{appId}/{tableName}
     - 
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) CloudObject that needs to be added to cloudboost 

     - returns: RequestBuilder<CloudObject> 
     */
    public class func saveWithRequestBuilder(appId appId: String, tableName: String, body: CloudObjectSaveRequest) -> RequestBuilder<CloudObject> {
        var path = "data/{appId}/{tableName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudObject>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
