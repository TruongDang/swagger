//
// CloudQueryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudQueryAPI: APIBase {
    /**
     
     count items in a table that match this query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func count(appId appId: String, tableName: String, body: CloudQueryCount, completion: ((data: Int?, error: ErrorType?) -> Void)) {
        countWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     count items in a table that match this query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - returns: Promise<Int>
     */
    public class func count(appId appId: String, tableName: String, body: CloudQueryCount) -> Promise<Int> {
        let deferred = Promise<Int>.pendingPromise()
        count(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     count items in a table that match this query criteria
     
     - POST data/{appId}/{tableName}/count
     - count items in a table that match this query criteria
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 

     - returns: RequestBuilder<Int> 
     */
    public class func countWithRequestBuilder(appId appId: String, tableName: String, body: CloudQueryCount) -> RequestBuilder<Int> {
        var path = "data/{appId}/{tableName}/count"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Int>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     distinct query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func distinct(appId appId: String, tableName: String, body: CloudQueryDistinct, completion: ((data: [CloudObject]?, error: ErrorType?) -> Void)) {
        distinctWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     distinct query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - returns: Promise<[CloudObject]>
     */
    public class func distinct(appId appId: String, tableName: String, body: CloudQueryDistinct) -> Promise<[CloudObject]> {
        let deferred = Promise<[CloudObject]>.pendingPromise()
        distinct(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     distinct query criteria
     
     - POST data/{appId}/{tableName}/distinct
     - 
     - examples: [{contentType=application/json, example=[ { } ]}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 

     - returns: RequestBuilder<[CloudObject]> 
     */
    public class func distinctWithRequestBuilder(appId appId: String, tableName: String, body: CloudQueryDistinct) -> RequestBuilder<[CloudObject]> {
        var path = "data/{appId}/{tableName}/distinct"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CloudObject]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     find CloudObject meeting this query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func find(appId appId: String, tableName: String, body: CloudQuery, completion: ((data: [CloudObject]?, error: ErrorType?) -> Void)) {
        findWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     find CloudObject meeting this query criteria
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query object 
     - returns: Promise<[CloudObject]>
     */
    public class func find(appId appId: String, tableName: String, body: CloudQuery) -> Promise<[CloudObject]> {
        let deferred = Promise<[CloudObject]>.pendingPromise()
        find(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     find CloudObject meeting this query criteria
     
     - POST data/{appId}/{tableName}/find
     - 
     - examples: [{contentType=application/json, example=[ { } ]}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query object 

     - returns: RequestBuilder<[CloudObject]> 
     */
    public class func findWithRequestBuilder(appId appId: String, tableName: String, body: CloudQuery) -> RequestBuilder<[CloudObject]> {
        var path = "data/{appId}/{tableName}/find"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CloudObject]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     find CloudObject with specific _id
     
     - parameter cloudAppId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func findById(cloudAppId cloudAppId: String, tableName: String, body: CloudQueryFindById, completion: ((data: CloudObject?, error: ErrorType?) -> Void)) {
        findByIdWithRequestBuilder(cloudAppId: cloudAppId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     find CloudObject with specific _id
     
     - parameter cloudAppId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - returns: Promise<CloudObject>
     */
    public class func findById(cloudAppId cloudAppId: String, tableName: String, body: CloudQueryFindById) -> Promise<CloudObject> {
        let deferred = Promise<CloudObject>.pendingPromise()
        findById(cloudAppId: cloudAppId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     find CloudObject with specific _id
     
     - POST data/{cloudAppId}/{tableName}/find
     - 
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter cloudAppId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 

     - returns: RequestBuilder<CloudObject> 
     */
    public class func findByIdWithRequestBuilder(cloudAppId cloudAppId: String, tableName: String, body: CloudQueryFindById) -> RequestBuilder<CloudObject> {
        var path = "data/{cloudAppId}/{tableName}/find"
        path = path.stringByReplacingOccurrencesOfString("{cloudAppId}", withString: "\(cloudAppId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudObject>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     find a single CloudObject
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func findOne(appId appId: String, tableName: String, body: CloudQueryFindOne, completion: ((data: CloudObject?, error: ErrorType?) -> Void)) {
        findOneWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     find a single CloudObject
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - returns: Promise<CloudObject>
     */
    public class func findOne(appId appId: String, tableName: String, body: CloudQueryFindOne) -> Promise<CloudObject> {
        let deferred = Promise<CloudObject>.pendingPromise()
        findOne(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     find a single CloudObject
     
     - POST data/{appId}/{tableName}/findOne
     - 
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 

     - returns: RequestBuilder<CloudObject> 
     */
    public class func findOneWithRequestBuilder(appId appId: String, tableName: String, body: CloudQueryFindOne) -> RequestBuilder<CloudObject> {
        var path = "data/{appId}/{tableName}/findOne"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CloudObject>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
