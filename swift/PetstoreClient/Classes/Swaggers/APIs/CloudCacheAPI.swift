//
// CloudCacheAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudCacheAPI: APIBase {
    /**
     
     add item to a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be store in cache 
     - parameter body: (body) cache data and master key included got from this object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func callSet(appId appId: String, cacheName: String, dataKey: String, body: CacheRequest, completion: ((data: String?, error: ErrorType?) -> Void)) {
        callSetWithRequestBuilder(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     add item to a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be store in cache 
     - parameter body: (body) cache data and master key included got from this object 
     - returns: Promise<String>
     */
    public class func callSet(appId appId: String, cacheName: String, dataKey: String, body: CacheRequest) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        callSet(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     add item to a cloud cache
     
     - PUT cache/{appId}/{cacheName}/{dataKey}
     - add item to a cloud cache
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be store in cache 
     - parameter body: (body) cache data and master key included got from this object 

     - returns: RequestBuilder<String> 
     */
    public class func callSetWithRequestBuilder(appId appId: String, cacheName: String, dataKey: String, body: CacheRequest) -> RequestBuilder<String> {
        var path = "cache/{appId}/{cacheName}/{dataKey}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dataKey}", withString: "\(dataKey)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     clear all items from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func clearCache(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: [CacheRequest]?, error: ErrorType?) -> Void)) {
        clearCacheWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     clear all items from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<[CacheRequest]>
     */
    public class func clearCache(appId appId: String, cacheName: String, body: KeyBody) -> Promise<[CacheRequest]> {
        let deferred = Promise<[CacheRequest]>.pendingPromise()
        clearCache(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     clear all items from a cloud cache
     
     - DELETE cache/{appId}/{cacheName}/clear
     - clear all items from a cloud cache
     - examples: [{contentType=application/json, example=[ {
  "item" : "aeiou",
  "key" : "aeiou"
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<[CacheRequest]> 
     */
    public class func clearCacheWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<[CacheRequest]> {
        var path = "cache/{appId}/{cacheName}/clear"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CacheRequest]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     create a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createCache(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: Cache?, error: ErrorType?) -> Void)) {
        createCacheWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     create a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<Cache>
     */
    public class func createCache(appId appId: String, cacheName: String, body: KeyBody) -> Promise<Cache> {
        let deferred = Promise<Cache>.pendingPromise()
        createCache(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     create a cloud cache
     
     - POST cache/{appId}/{cacheName}/create
     - create a cloud cache
     - examples: [{contentType=application/json, example={
  "size" : "aeiou",
  "_type" : "aeiou",
  "name" : "aeiou"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<Cache> 
     */
    public class func createCacheWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<Cache> {
        var path = "cache/{appId}/{cacheName}/create"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Cache>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete all CloudCaches
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAllCache(appId appId: String, body: KeyBody, completion: ((data: [CacheRequest]?, error: ErrorType?) -> Void)) {
        deleteAllCacheWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete all CloudCaches
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 
     - returns: Promise<[CacheRequest]>
     */
    public class func deleteAllCache(appId appId: String, body: KeyBody) -> Promise<[CacheRequest]> {
        let deferred = Promise<[CacheRequest]>.pendingPromise()
        deleteAllCache(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete all CloudCaches
     
     - DELETE cache/{appId}
     - delete all CloudCaches
     - examples: [{contentType=application/json, example=[ {
  "item" : "aeiou",
  "key" : "aeiou"
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<[CacheRequest]> 
     */
    public class func deleteAllCacheWithRequestBuilder(appId appId: String, body: KeyBody) -> RequestBuilder<[CacheRequest]> {
        var path = "cache/{appId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CacheRequest]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete a CloudCache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCache(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: CacheRequest?, error: ErrorType?) -> Void)) {
        deleteCacheWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete a CloudCache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<CacheRequest>
     */
    public class func deleteCache(appId appId: String, cacheName: String, body: KeyBody) -> Promise<CacheRequest> {
        let deferred = Promise<CacheRequest>.pendingPromise()
        deleteCache(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete a CloudCache
     
     - DELETE cache/{appId}/{cacheName}
     - delete a CloudCache
     - examples: [{contentType=application/json, example={
  "item" : "aeiou",
  "key" : "aeiou"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<CacheRequest> 
     */
    public class func deleteCacheWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<CacheRequest> {
        var path = "cache/{appId}/{cacheName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CacheRequest>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     delete item from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data to delete is cached 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItem(appId appId: String, cacheName: String, dataKey: String, body: KeyBody, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteItemWithRequestBuilder(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     delete item from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data to delete is cached 
     - parameter body: (body) master key of app 
     - returns: Promise<String>
     */
    public class func deleteItem(appId appId: String, cacheName: String, dataKey: String, body: KeyBody) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        deleteItem(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     delete item from a cloud cache
     
     - DELETE cache/{appId}/{cacheName}/item/{dataKey}
     - delete item from a cloud cache
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data to delete is cached 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<String> 
     */
    public class func deleteItemWithRequestBuilder(appId appId: String, cacheName: String, dataKey: String, body: KeyBody) -> RequestBuilder<String> {
        var path = "cache/{appId}/{cacheName}/item/{dataKey}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dataKey}", withString: "\(dataKey)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get all CloudCaches
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllCache(appId appId: String, body: KeyBody, completion: ((data: [Cache]?, error: ErrorType?) -> Void)) {
        getAllCacheWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get all CloudCaches
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 
     - returns: Promise<[Cache]>
     */
    public class func getAllCache(appId appId: String, body: KeyBody) -> Promise<[Cache]> {
        let deferred = Promise<[Cache]>.pendingPromise()
        getAllCache(appId: appId, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get all CloudCaches
     
     - POST cache/{appId}
     - get all CloudCaches
     - examples: [{contentType=application/json, example=[ {
  "size" : "aeiou",
  "_type" : "aeiou",
  "name" : "aeiou"
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<[Cache]> 
     */
    public class func getAllCacheWithRequestBuilder(appId appId: String, body: KeyBody) -> RequestBuilder<[Cache]> {
        var path = "cache/{appId}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[Cache]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get all items from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllItems(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: [CacheItem]?, error: ErrorType?) -> Void)) {
        getAllItemsWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get all items from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<[CacheItem]>
     */
    public class func getAllItems(appId appId: String, cacheName: String, body: KeyBody) -> Promise<[CacheItem]> {
        let deferred = Promise<[CacheItem]>.pendingPromise()
        getAllItems(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get all items from a cloud cache
     
     - POST cache/{appId}/{cacheName}/items
     - get all items from a cloud cache
     - examples: [{contentType=application/json, example=[ {
  "value" : "aeiou",
  "key" : "aeiou"
} ]}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<[CacheItem]> 
     */
    public class func getAllItemsWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<[CacheItem]> {
        var path = "cache/{appId}/{cacheName}/items"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CacheItem]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get info about a CloudCache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCacheInfo(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: Cache?, error: ErrorType?) -> Void)) {
        getCacheInfoWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get info about a CloudCache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<Cache>
     */
    public class func getCacheInfo(appId appId: String, cacheName: String, body: KeyBody) -> Promise<Cache> {
        let deferred = Promise<Cache>.pendingPromise()
        getCacheInfo(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get info about a CloudCache
     
     - POST cache/{appId}/{cacheName}
     - get info about a CloudCache
     - examples: [{contentType=application/json, example={
  "size" : "aeiou",
  "_type" : "aeiou",
  "name" : "aeiou"
}}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<Cache> 
     */
    public class func getCacheInfoWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<Cache> {
        var path = "cache/{appId}/{cacheName}"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Cache>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     get item from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be got in cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItem(appId appId: String, cacheName: String, dataKey: String, body: KeyBody, completion: ((data: String?, error: ErrorType?) -> Void)) {
        getItemWithRequestBuilder(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     get item from a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be got in cache 
     - parameter body: (body) master key of app 
     - returns: Promise<String>
     */
    public class func getItem(appId appId: String, cacheName: String, dataKey: String, body: KeyBody) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        getItem(appId: appId, cacheName: cacheName, dataKey: dataKey, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     get item from a cloud cache
     
     - POST cache/{appId}/{cacheName}/{dataKey}/item
     - get item from a cloud cache
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter dataKey: (path) key under which data should be got in cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<String> 
     */
    public class func getItemWithRequestBuilder(appId appId: String, cacheName: String, dataKey: String, body: KeyBody) -> RequestBuilder<String> {
        var path = "cache/{appId}/{cacheName}/{dataKey}/item"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dataKey}", withString: "\(dataKey)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<String>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     count items in a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemsCount(appId appId: String, cacheName: String, body: KeyBody, completion: ((data: Int?, error: ErrorType?) -> Void)) {
        getItemsCountWithRequestBuilder(appId: appId, cacheName: cacheName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     count items in a cloud cache
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 
     - returns: Promise<Int>
     */
    public class func getItemsCount(appId appId: String, cacheName: String, body: KeyBody) -> Promise<Int> {
        let deferred = Promise<Int>.pendingPromise()
        getItemsCount(appId: appId, cacheName: cacheName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     count items in a cloud cache
     
     - POST cache/{appId}/{cacheName}/items/count
     - count items in a cloud cache
     - examples: [{contentType=application/json, example=""}]
     
     - parameter appId: (path) Id of CloudApp 
     - parameter cacheName: (path) Name of cache 
     - parameter body: (body) master key of app 

     - returns: RequestBuilder<Int> 
     */
    public class func getItemsCountWithRequestBuilder(appId appId: String, cacheName: String, body: KeyBody) -> RequestBuilder<Int> {
        var path = "cache/{appId}/{cacheName}/items/count"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cacheName}", withString: "\(cacheName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Int>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
