//
// CloudSearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class CloudSearchAPI: APIBase {
    /**
     
     search for cloudobjects following the criteria defined herein
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func search(appId appId: String, tableName: String, body: CloudSearch, completion: ((data: [CloudObject]?, error: ErrorType?) -> Void)) {
        searchWithRequestBuilder(appId: appId, tableName: tableName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     search for cloudobjects following the criteria defined herein
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 
     - returns: Promise<[CloudObject]>
     */
    public class func search(appId appId: String, tableName: String, body: CloudSearch) -> Promise<[CloudObject]> {
        let deferred = Promise<[CloudObject]>.pendingPromise()
        search(appId: appId, tableName: tableName, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     search for cloudobjects following the criteria defined herein
     
     - POST data/{appId}/{tableName}/search
     - 
     - examples: [{contentType=application/json, example=[ { } ]}]
     
     - parameter appId: (path) CloudApp id 
     - parameter tableName: (path) cloud table name 
     - parameter body: (body) query body 

     - returns: RequestBuilder<[CloudObject]> 
     */
    public class func searchWithRequestBuilder(appId appId: String, tableName: String, body: CloudSearch) -> RequestBuilder<[CloudObject]> {
        var path = "data/{appId}/{tableName}/search"
        path = path.stringByReplacingOccurrencesOfString("{appId}", withString: "\(appId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tableName}", withString: "\(tableName)", options: .LiteralSearch, range: nil)
        let URLString = PetstoreClientAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<[CloudObject]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
