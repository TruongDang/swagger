using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CloudUserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CloudUserApiTests
    {
        private CloudUserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new CloudUserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CloudUserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<CloudUserApi> (instance, "instance is a CloudUserApi");
        }

        
        /// <summary>
        /// Test AddToRole
        /// </summary>
        [Test]
        public void AddToRoleTest()
        {
            // TODO: add unit test for the method 'AddToRole'
            string appId = null; // TODO: replace null with proper value
            UserRoleBody body = null; // TODO: replace null with proper value
            
            var response = instance.AddToRole(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
        /// <summary>
        /// Test ChangePassword
        /// </summary>
        [Test]
        public void ChangePasswordTest()
        {
            // TODO: add unit test for the method 'ChangePassword'
            string appId = null; // TODO: replace null with proper value
            PasswordChangeBody body = null; // TODO: replace null with proper value
            
            var response = instance.ChangePassword(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO: add unit test for the method 'Login'
            string appId = null; // TODO: replace null with proper value
            UserBody body = null; // TODO: replace null with proper value
            
            var response = instance.Login(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
        /// <summary>
        /// Test Logout
        /// </summary>
        [Test]
        public void LogoutTest()
        {
            // TODO: add unit test for the method 'Logout'
            string appId = null; // TODO: replace null with proper value
            UserBody body = null; // TODO: replace null with proper value
            
            var response = instance.Logout(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
        /// <summary>
        /// Test RemoveFromRole
        /// </summary>
        [Test]
        public void RemoveFromRoleTest()
        {
            // TODO: add unit test for the method 'RemoveFromRole'
            string appId = null; // TODO: replace null with proper value
            UserRoleBody body = null; // TODO: replace null with proper value
            
            var response = instance.RemoveFromRole(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Test]
        public void ResetPasswordTest()
        {
            // TODO: add unit test for the method 'ResetPassword'
            string appId = null; // TODO: replace null with proper value
            EmailBody body = null; // TODO: replace null with proper value
            
            var response = instance.ResetPassword(appId, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test SignUp
        /// </summary>
        [Test]
        public void SignUpTest()
        {
            // TODO: add unit test for the method 'SignUp'
            string appId = null; // TODO: replace null with proper value
            UserBody body = null; // TODO: replace null with proper value
            
            var response = instance.SignUp(appId, body);
            Assert.IsInstanceOf<CloudUser> (response, "response is CloudUser"); 
        }
        
    }

}
