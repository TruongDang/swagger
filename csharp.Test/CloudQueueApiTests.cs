using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CloudQueueApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CloudQueueApiTests
    {
        private CloudQueueApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new CloudQueueApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CloudQueueApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<CloudQueueApi> (instance, "instance is a CloudQueueApi");
        }

        
        /// <summary>
        /// Test AddMessage
        /// </summary>
        [Test]
        public void AddMessageTest()
        {
            // TODO: add unit test for the method 'AddMessage'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.AddMessage(appId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test AddSubscriber
        /// </summary>
        [Test]
        public void AddSubscriberTest()
        {
            // TODO: add unit test for the method 'AddSubscriber'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.AddSubscriber(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test Clear
        /// </summary>
        [Test]
        public void ClearTest()
        {
            // TODO: add unit test for the method 'Clear'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.Clear(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test CreateQueue
        /// </summary>
        [Test]
        public void CreateQueueTest()
        {
            // TODO: add unit test for the method 'CreateQueue'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.CreateQueue(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test DeleteMessage
        /// </summary>
        [Test]
        public void DeleteMessageTest()
        {
            // TODO: add unit test for the method 'DeleteMessage'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            string messageId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteMessage(appId, queueName, messageId, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test DeleteQueue
        /// </summary>
        [Test]
        public void DeleteQueueTest()
        {
            // TODO: add unit test for the method 'DeleteQueue'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteQueue(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test DeleteSubscriber
        /// </summary>
        [Test]
        public void DeleteSubscriberTest()
        {
            // TODO: add unit test for the method 'DeleteSubscriber'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteSubscriber(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test GetAllMessages
        /// </summary>
        [Test]
        public void GetAllMessagesTest()
        {
            // TODO: add unit test for the method 'GetAllMessages'
            string appId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetAllMessages(appId, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test GetAllQueues
        /// </summary>
        [Test]
        public void GetAllQueuesTest()
        {
            // TODO: add unit test for the method 'GetAllQueues'
            string appId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetAllQueues(appId, body);
            Assert.IsInstanceOf<List<Queue>> (response, "response is List<Queue>"); 
        }
        
        /// <summary>
        /// Test GetMessage
        /// </summary>
        [Test]
        public void GetMessageTest()
        {
            // TODO: add unit test for the method 'GetMessage'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueuePayloadWithCount body = null; // TODO: replace null with proper value
            
            var response = instance.GetMessage(appId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test GetMessageById
        /// </summary>
        [Test]
        public void GetMessageByIdTest()
        {
            // TODO: add unit test for the method 'GetMessageById'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            string messageId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetMessageById(appId, queueName, messageId, body);
            Assert.IsInstanceOf<QueueMessage> (response, "response is QueueMessage"); 
        }
        
        /// <summary>
        /// Test GetQueue
        /// </summary>
        [Test]
        public void GetQueueTest()
        {
            // TODO: add unit test for the method 'GetQueue'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetQueue(appId, queueName, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue"); 
        }
        
        /// <summary>
        /// Test Peek
        /// </summary>
        [Test]
        public void PeekTest()
        {
            // TODO: add unit test for the method 'Peek'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueuePayloadWithCount body = null; // TODO: replace null with proper value
            
            var response = instance.Peek(appId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test PeekMessage
        /// </summary>
        [Test]
        public void PeekMessageTest()
        {
            // TODO: add unit test for the method 'PeekMessage'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueuePayloadWithCount body = null; // TODO: replace null with proper value
            
            var response = instance.PeekMessage(appId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test Pull
        /// </summary>
        [Test]
        public void PullTest()
        {
            // TODO: add unit test for the method 'Pull'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueuePayloadWithCount body = null; // TODO: replace null with proper value
            
            var response = instance.Pull(appId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test RefreshMessageTimeout
        /// </summary>
        [Test]
        public void RefreshMessageTimeoutTest()
        {
            // TODO: add unit test for the method 'RefreshMessageTimeout'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            string messageId = null; // TODO: replace null with proper value
            RefreshMessageTimeoutBody body = null; // TODO: replace null with proper value
            
            var response = instance.RefreshMessageTimeout(appId, queueName, messageId, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test UpdateMessage
        /// </summary>
        [Test]
        public void UpdateMessageTest()
        {
            // TODO: add unit test for the method 'UpdateMessage'
            string myAppId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            QueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.UpdateMessage(myAppId, queueName, body);
            Assert.IsInstanceOf<List<QueueMessage>> (response, "response is List<QueueMessage>"); 
        }
        
        /// <summary>
        /// Test UpdateQueue
        /// </summary>
        [Test]
        public void UpdateQueueTest()
        {
            // TODO: add unit test for the method 'UpdateQueue'
            string appId = null; // TODO: replace null with proper value
            string queueName = null; // TODO: replace null with proper value
            ModifiedQueueBody body = null; // TODO: replace null with proper value
            
            var response = instance.UpdateQueue(appId, queueName, body);
            Assert.IsInstanceOf<ModifiedQueue> (response, "response is ModifiedQueue"); 
        }
        
    }

}
