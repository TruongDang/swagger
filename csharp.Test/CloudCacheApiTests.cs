using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CloudCacheApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CloudCacheApiTests
    {
        private CloudCacheApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new CloudCacheApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CloudCacheApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<CloudCacheApi> (instance, "instance is a CloudCacheApi");
        }

        
        /// <summary>
        /// Test ClearCache
        /// </summary>
        [Test]
        public void ClearCacheTest()
        {
            // TODO: add unit test for the method 'ClearCache'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.ClearCache(appId, cacheName, body);
            Assert.IsInstanceOf<List<CacheRequest>> (response, "response is List<CacheRequest>"); 
        }
        
        /// <summary>
        /// Test CreateCache
        /// </summary>
        [Test]
        public void CreateCacheTest()
        {
            // TODO: add unit test for the method 'CreateCache'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.CreateCache(appId, cacheName, body);
            Assert.IsInstanceOf<Cache> (response, "response is Cache"); 
        }
        
        /// <summary>
        /// Test DeleteAllCache
        /// </summary>
        [Test]
        public void DeleteAllCacheTest()
        {
            // TODO: add unit test for the method 'DeleteAllCache'
            string appId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteAllCache(appId, body);
            Assert.IsInstanceOf<List<CacheRequest>> (response, "response is List<CacheRequest>"); 
        }
        
        /// <summary>
        /// Test DeleteCache
        /// </summary>
        [Test]
        public void DeleteCacheTest()
        {
            // TODO: add unit test for the method 'DeleteCache'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteCache(appId, cacheName, body);
            Assert.IsInstanceOf<CacheRequest> (response, "response is CacheRequest"); 
        }
        
        /// <summary>
        /// Test DeleteItem
        /// </summary>
        [Test]
        public void DeleteItemTest()
        {
            // TODO: add unit test for the method 'DeleteItem'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            string dataKey = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteItem(appId, cacheName, dataKey, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test GetAllCache
        /// </summary>
        [Test]
        public void GetAllCacheTest()
        {
            // TODO: add unit test for the method 'GetAllCache'
            string appId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetAllCache(appId, body);
            Assert.IsInstanceOf<List<Cache>> (response, "response is List<Cache>"); 
        }
        
        /// <summary>
        /// Test GetAllItems
        /// </summary>
        [Test]
        public void GetAllItemsTest()
        {
            // TODO: add unit test for the method 'GetAllItems'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetAllItems(appId, cacheName, body);
            Assert.IsInstanceOf<List<CacheItem>> (response, "response is List<CacheItem>"); 
        }
        
        /// <summary>
        /// Test GetCacheInfo
        /// </summary>
        [Test]
        public void GetCacheInfoTest()
        {
            // TODO: add unit test for the method 'GetCacheInfo'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetCacheInfo(appId, cacheName, body);
            Assert.IsInstanceOf<Cache> (response, "response is Cache"); 
        }
        
        /// <summary>
        /// Test GetItem
        /// </summary>
        [Test]
        public void GetItemTest()
        {
            // TODO: add unit test for the method 'GetItem'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            string dataKey = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetItem(appId, cacheName, dataKey, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test GetItemsCount
        /// </summary>
        [Test]
        public void GetItemsCountTest()
        {
            // TODO: add unit test for the method 'GetItemsCount'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.GetItemsCount(appId, cacheName, body);
            Assert.IsInstanceOf<int?> (response, "response is int?"); 
        }
        
        /// <summary>
        /// Test Set
        /// </summary>
        [Test]
        public void SetTest()
        {
            // TODO: add unit test for the method 'Set'
            string appId = null; // TODO: replace null with proper value
            string cacheName = null; // TODO: replace null with proper value
            string dataKey = null; // TODO: replace null with proper value
            CacheRequest body = null; // TODO: replace null with proper value
            
            var response = instance.Set(appId, cacheName, dataKey, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
    }

}
