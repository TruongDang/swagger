using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CloudFileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CloudFileApiTests
    {
        private CloudFileApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new CloudFileApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CloudFileApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<CloudFileApi> (instance, "instance is a CloudFileApi");
        }

        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            // TODO: add unit test for the method 'DeleteFile'
            string appId = null; // TODO: replace null with proper value
            string fileId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.DeleteFile(appId, fileId, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test FetchFileContent
        /// </summary>
        [Test]
        public void FetchFileContentTest()
        {
            // TODO: add unit test for the method 'FetchFileContent'
            string appId = null; // TODO: replace null with proper value
            string fileId = null; // TODO: replace null with proper value
            KeyBody body = null; // TODO: replace null with proper value
            
            var response = instance.FetchFileContent(appId, fileId, body);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test SaveFile
        /// </summary>
        [Test]
        public void SaveFileTest()
        {
            // TODO: add unit test for the method 'SaveFile'
            string appId = null; // TODO: replace null with proper value
            string fileObj = null; // TODO: replace null with proper value
            string key = null; // TODO: replace null with proper value
            Stream fileToUpload = null; // TODO: replace null with proper value
            
            var response = instance.SaveFile(appId, fileObj, key, fileToUpload);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
        /// <summary>
        /// Test SaveFileData
        /// </summary>
        [Test]
        public void SaveFileDataTest()
        {
            // TODO: add unit test for the method 'SaveFileData'
            string myAppId = null; // TODO: replace null with proper value
            FileBody fileObj = null; // TODO: replace null with proper value
            
            var response = instance.SaveFileData(myAppId, fileObj);
            Assert.IsInstanceOf<string> (response, "response is string"); 
        }
        
    }

}
